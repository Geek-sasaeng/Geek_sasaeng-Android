Index: app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.Retrofit\r\n\r\nimport com.example.geeksasaeng.Signup.Retrofit.SignUpResult\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n// 파티보기 상세조회\r\ndata class PartyDetailResponse(\r\n    @SerializedName(\"code\") val code: Int,\r\n    @SerializedName(\"isSuccess\") val isSuccess : Boolean,\r\n    @SerializedName(\"message\") val message: String,\r\n    @SerializedName(\"result\") val result: PartyDetailResult?\r\n)\r\n\r\ndata class PartyDetailResult(\r\n    @SerializedName(\"authorStatus\") val authorStatus: Boolean,\r\n    @SerializedName(\"chief\") val chief: String,\r\n    @SerializedName(\"chiefId\") val chiefId: Int,\r\n    @SerializedName(\"chiefProfileImgUrl\") val chiefProfileImgUrl: String?,\r\n    @SerializedName(\"content\") val content: String,\r\n    @SerializedName(\"currentMatching\") val currentMatching: Int,\r\n    @SerializedName(\"dormitory\") val dormitory: Int,\r\n    @SerializedName(\"foodCategory\") val foodCategory: String,\r\n    @SerializedName(\"hashTag\") val hashTag: Boolean,\r\n    @SerializedName(\"id\") val id: Int,\r\n    @SerializedName(\"latitude\") val latitude: Double,\r\n    @SerializedName(\"longitude\") val longitude: Double,\r\n    @SerializedName(\"matchingStatus\") val matchingStatus: String,\r\n    @SerializedName(\"maxMatching\") val maxMatching: Int,\r\n    @SerializedName(\"orderTime\") val orderTime: String,\r\n    @SerializedName(\"storeUrl\") val storeUrl: String?,\r\n    @SerializedName(\"title\") val title: String,\r\n    @SerializedName(\"updatedAt\") val updatedAt: String,\r\n)\r\n\r\ndata class PartyDeleteResponse(\r\n    @SerializedName(\"code\") val code: Int,\r\n    @SerializedName(\"isSuccess\") val isSuccess : Boolean,\r\n    @SerializedName(\"message\") val message: String,\r\n    @SerializedName(\"result\") val result: PartyDeleteResult?\r\n)\r\n\r\ndata class PartyDeleteResult(\r\n    @SerializedName(\"deliveryPartyId\") val deliveryPartyId: Int,\r\n    @SerializedName(\"status\") val status: String\r\n)\r\n\r\ndata class PartyReportResponse(\r\n    @SerializedName(\"code\") val code: Int,\r\n    @SerializedName(\"isSuccess\") val isSuccess : Boolean,\r\n    @SerializedName(\"message\") val message: String,\r\n    @SerializedName(\"result\") val result: String\r\n)\r\n\r\ndata class PartyReportRequest(\r\n    @SerializedName(\"block\") val block: Boolean,\r\n    @SerializedName(\"reportCategoryId\") val reportCategoryId: Int,\r\n    @SerializedName(\"reportContent\") val reportContent: String?,\r\n    @SerializedName(\"reportedDeliveryPartyId\") val reportedDeliveryPartyId: Int,\r\n    @SerializedName(\"reportedMemberId\") val reportedMemberId: Int\r\n)\r\n\r\ndata class UserReportResponse(\r\n    @SerializedName(\"code\") val code: Int,\r\n    @SerializedName(\"isSuccess\") val isSuccess : Boolean,\r\n    @SerializedName(\"message\") val message: String,\r\n    @SerializedName(\"result\") val result: String\r\n)\r\n\r\ndata class UserReportRequest(\r\n    @SerializedName(\"block\") val block: Boolean,\r\n    @SerializedName(\"reportCategoryId\") val reportCategoryId: Int,\r\n    @SerializedName(\"reportContent\") val reportContent: String?,\r\n    @SerializedName(\"reportedMemberId\") val reportedMemberId: Int\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyResponse.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyResponse.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyResponse.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyResponse.kt	(date 1659938015945)
@@ -71,4 +71,20 @@
     @SerializedName("reportCategoryId") val reportCategoryId: Int,
     @SerializedName("reportContent") val reportContent: String?,
     @SerializedName("reportedMemberId") val reportedMemberId: Int
+)
+
+data class JoinPartyResponse(
+    @SerializedName("code") val code: Int,
+    @SerializedName("isSuccess") val isSuccess: Boolean,
+    @SerializedName("message") val message: String,
+    @SerializedName("result") val result: JoinPartyResult
+)
+
+data class JoinPartyResult(
+    @SerializedName("deliveryPartyId") val deliveryPartyId: Int,
+    @SerializedName("deliveryPartyMemberId") val deliveryPartyMemberId: Int
+)
+
+data class JoinPartyRequest(
+    @SerializedName("partyId") val partyId: Int
 )
\ No newline at end of file
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyDataService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.Retrofit\r\n\r\nimport android.util.Log\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyRequest\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryRetrofitInterfaces\r\nimport com.example.geeksasaeng.Utils.ApplicationClass\r\nimport com.example.geeksasaeng.Utils.ApplicationClass.Companion.retrofit\r\nimport com.example.geeksasaeng.Utils.NetworkModule\r\nimport com.example.geeksasaeng.Utils.getJwt\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\nclass PartyDataService {\r\n\r\n    //뷰 객체 생성\r\n    private lateinit var partyDetailView: PartyDetailView\r\n    private lateinit var partyDeleteView: PartyDeleteView\r\n    private lateinit var partyReportView: PartyReportView\r\n    private lateinit var userReportView: UserReportView\r\n\r\n    //setView\r\n    fun setPartyDetailView(partyDetailView: PartyDetailView) {\r\n        this.partyDetailView = partyDetailView\r\n    }\r\n    fun setPartyDeleteView(partyDeleteView: PartyDeleteView) {\r\n        this.partyDeleteView = partyDeleteView\r\n    }\r\n    fun setPartyReportView(partyReportView: PartyReportView) {\r\n        this.partyReportView = partyReportView\r\n    }\r\n    fun setUserReportView(userReportView: UserReportView) {\r\n        this.userReportView = userReportView\r\n    }\r\n\r\n    //파티보기 상세조회\r\n    fun partyDetailSender(partyId: Int) {\r\n        val partyDetailService = NetworkModule.getInstance()?.create(PartyRetrofitInterface::class.java)\r\n        partyDetailService?.getDeliveryPartyDetail(\"Bearer \" + getJwt(), partyId)?.enqueue(object : Callback<PartyDetailResponse> {\r\n            override fun onResponse(call: Call<PartyDetailResponse>, response: Response<PartyDetailResponse>) {\r\n                Log.d(\"PARTY-DETAIL-RESPONSE\", \"PartyDataService-onResponse : response.code = \" + response.code())\r\n                Log.d(\"PARTY-DETAIL-RESPONSE\", \"PartyDataService-onResponse : response.isSuccessful = \" + response.isSuccessful)\r\n\r\n                if (response.isSuccessful && response.code() == 200) {\r\n                    val partyDetailResponse: PartyDetailResponse = response.body()!!\r\n\r\n                    Log.d(\"PARTY-DETAIL-RESPONSE\", \"PartyDataService-onResponse : code = \" + partyDetailResponse.code)\r\n                    Log.d(\"PARTY-DETAIL-RESPONSE\", \"PartyDataService-onResponse : message = \" + partyDetailResponse.message)\r\n\r\n                    when (partyDetailResponse.code) {\r\n                        1000 -> partyDetailView.partyDetailSuccess(partyDetailResponse.result!!)\r\n                        else -> partyDetailView.partyDetailFailure(partyDetailResponse.code, partyDetailResponse.message)\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<PartyDetailResponse>, t: Throwable) {\r\n                Log.d(\"PARTY-DETAIL-RESPONSE\", \"PartyDataService-onFailure : PartyDetailSendFailed\", t)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 파티 삭제하기\r\n    fun partyDeleteSender(partyId: Int) {\r\n        val partyDeleteService = NetworkModule.getInstance()?.create(PartyRetrofitInterface::class.java)\r\n        partyDeleteService?.sendDeleteDeliveryParty(\"Bearer \" + getJwt(), partyId)?.enqueue(object : Callback<PartyDeleteResponse> {\r\n            override fun onResponse(call: Call<PartyDeleteResponse>, response: Response<PartyDeleteResponse>) {\r\n                Log.d(\"PARTY-DELETE-RESPONSE\", \"PartyDataService-onResponse : response.code = \" + response.code())\r\n                Log.d(\"PARTY-DELETE-RESPONSE\", \"PartyDataService-onResponse : response.isSuccessful = \" + response.isSuccessful)\r\n\r\n                if (response.isSuccessful && response.code() == 200) {\r\n                    val partyDetailResponse: PartyDeleteResponse = response.body()!!\r\n\r\n                    Log.d(\"PARTY-DELETE-RESPONSE\", \"PartyDataService-onResponse : code = \" + partyDetailResponse.code)\r\n                    Log.d(\"PARTY-DELETE-RESPONSE\", \"PartyDataService-onResponse : message = \" + partyDetailResponse.message)\r\n\r\n                    when (partyDetailResponse.code) {\r\n                        1000 -> partyDeleteView.partyDeleteViewSuccess(partyDetailResponse.code)\r\n                        else -> partyDeleteView.partyDeleteViewFailure(partyDetailResponse.message)\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<PartyDeleteResponse>, t: Throwable) {\r\n                Log.d(\"PARTY-DELETE-RESPONSE\", \"PartyDataService-onFailure : PartyDetailSendFailed\", t)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 파티 신고하기\r\n    fun partyReportSender(partyReportRequest: PartyReportRequest) {\r\n        val partyReportService = NetworkModule.getInstance()?.create(PartyRetrofitInterface::class.java)\r\n        partyReportService?.reportDeliveryParty(\"Bearer \" + getJwt(), partyReportRequest)?.enqueue(object : Callback<PartyReportResponse> {\r\n            override fun onResponse(call: Call<PartyReportResponse>, response: Response<PartyReportResponse>) {\r\n                Log.d(\"PARTY-REPORT-RESPONSE\", \"PartyDataService-onResponse : response.code = \" + response.code())\r\n                Log.d(\"PARTY-REPORT-RESPONSE\", \"PartyDataService-onResponse : response.isSuccessful = \" + response.isSuccessful)\r\n\r\n                if (response.isSuccessful && response.code() == 200) {\r\n                    val partyReportResponse: PartyReportResponse = response.body()!!\r\n\r\n                    Log.d(\"PARTY-REPORT-RESPONSE\", \"PartyDataService-onResponse : code = \" + partyReportResponse.code)\r\n                    Log.d(\"PARTY-REPORT-RESPONSE\", \"PartyDataService-onResponse : message = \" + partyReportResponse.message)\r\n\r\n                    when (partyReportResponse.code) {\r\n                        1000 -> partyReportView.partyReportViewSuccess(partyReportResponse.code)\r\n                        else -> partyReportView.partyReportViewFailure(partyReportResponse.message)\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<PartyReportResponse>, t: Throwable) {\r\n                Log.d(\"PARTY-REPORT-RESPONSE\", \"PartyDataService-onFailure : PartyDetailSendFailed\", t)\r\n            }\r\n        })\r\n    }\r\n\r\n    // 사용자 신고하기\r\n    fun userReportSender(userReportRequest: UserReportRequest) {\r\n        val userReportService = NetworkModule.getInstance()?.create(PartyRetrofitInterface::class.java)\r\n        userReportService?.reportDeliveryUser(\"Bearer \" + getJwt(), userReportRequest)?.enqueue(object : Callback<UserReportResponse> {\r\n            override fun onResponse(call: Call<UserReportResponse>, response: Response<UserReportResponse>) {\r\n                Log.d(\"USER-REPORT-RESPONSE\", \"PartyDataService-onResponse : response.code = \" + response.code())\r\n                Log.d(\"USER-REPORT-RESPONSE\", \"PartyDataService-onResponse : response.isSuccessful = \" + response.isSuccessful)\r\n\r\n                if (response.isSuccessful && response.code() == 200) {\r\n                    val userReportResponse: UserReportResponse = response.body()!!\r\n\r\n                    Log.d(\"USER-REPORT-RESPONSE\", \"PartyDataService-onResponse : code = \" + userReportResponse.code)\r\n                    Log.d(\"USER-REPORT-RESPONSE\", \"PartyDataService-onResponse : message = \" + userReportResponse.message)\r\n\r\n                    when (userReportResponse.code) {\r\n                        1000 -> userReportView.userReportViewSuccess(userReportResponse.code)\r\n                        else -> userReportView.userReportViewFailure(userReportResponse.message)\r\n                    }\r\n                }\r\n            }\r\n            override fun onFailure(call: Call<UserReportResponse>, t: Throwable) {\r\n                Log.d(\"USER-REPORT-RESPONSE\", \"PartyDataService-onFailure : PartyDetailSendFailed\", t)\r\n            }\r\n        })\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyDataService.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyDataService.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyDataService.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyDataService.kt	(date 1659940851455)
@@ -1,7 +1,7 @@
 package com.example.geeksasaeng.Home.Party.Retrofit
 
 import android.util.Log
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyRequest
+import android.widget.Toast
 import com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryRetrofitInterfaces
 import com.example.geeksasaeng.Utils.ApplicationClass
 import com.example.geeksasaeng.Utils.ApplicationClass.Companion.retrofit
@@ -18,6 +18,7 @@
     private lateinit var partyDeleteView: PartyDeleteView
     private lateinit var partyReportView: PartyReportView
     private lateinit var userReportView: UserReportView
+    private lateinit var joinPartyView: JoinPartyView
 
     //setView
     fun setPartyDetailView(partyDetailView: PartyDetailView) {
@@ -32,6 +33,9 @@
     fun setUserReportView(userReportView: UserReportView) {
         this.userReportView = userReportView
     }
+    fun setJoinPartyView(joinPartyView: JoinPartyView) {
+        this.joinPartyView = joinPartyView
+    }
 
     //파티보기 상세조회
     fun partyDetailSender(partyId: Int) {
@@ -136,4 +140,26 @@
             }
         })
     }
+
+    // 배달 파티 참여하기
+    fun joinPartySender(joinPartyRequest: JoinPartyRequest) {
+        val joinPartyService = NetworkModule.getInstance()?.create(PartyRetrofitInterface::class.java)
+        joinPartyService?.joinDeliveryParty("Bearer " + getJwt(), joinPartyRequest)?.enqueue(object: Callback<JoinPartyResponse> {
+            override fun onResponse(call: Call<JoinPartyResponse>, response: Response<JoinPartyResponse>) {
+                if (response.isSuccessful && response.code() == 200) {
+                    val joinPartyResponse: JoinPartyResponse = response.body()!!
+
+                    when (joinPartyResponse.code) {
+                        1000 -> joinPartyView.joinPartyViewSuccess(joinPartyResponse.code)
+                        4000 -> Log.d("JOIN-PARTY", "서버 오류")
+                        else -> joinPartyView.joinPartyViewFailure(joinPartyResponse.message)
+                    }
+                }
+            }
+
+            override fun onFailure(call: Call<JoinPartyResponse>, t: Throwable) {
+                Log.d("Party-Response", "PartyDataService-joinPartySender-onFailure", t)
+            }
+        })
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyRetrofitInterface.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.Retrofit\r\n\r\nimport retrofit2.Call\r\nimport retrofit2.http.*\r\n\r\ninterface PartyRetrofitInterface {\r\n    // 배달파티 상세조회\r\n    @GET(\"delivery-party/{partyId}\")\r\n    fun getDeliveryPartyDetail(\r\n        @Header(\"Authorization\") jwt: String?,\r\n        @Path(\"partyId\") partyId: Int\r\n    ): Call<PartyDetailResponse>\r\n\r\n    @PATCH(\"delivery-party/{partyId}\")\r\n    fun sendDeleteDeliveryParty(\r\n        @Header(\"Authorization\") jwt: String?,\r\n        @Path(\"partyId\") partyId: Int\r\n    ): Call<PartyDeleteResponse>\r\n\r\n    @POST(\"reports/delivery-parties\")\r\n    fun reportDeliveryParty(\r\n        @Header(\"Authorization\") jwt: String?,\r\n        @Body reportPartyRequest: PartyReportRequest\r\n    ): Call<PartyReportResponse>\r\n\r\n    @POST(\"reports/members\")\r\n    fun reportDeliveryUser(\r\n        @Header(\"Authorization\") jwt: String?,\r\n        @Body reportUserRequest: UserReportRequest\r\n    ): Call<UserReportResponse>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyRetrofitInterface.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyRetrofitInterface.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyRetrofitInterface.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyRetrofitInterface.kt	(date 1659938527796)
@@ -28,4 +28,10 @@
         @Header("Authorization") jwt: String?,
         @Body reportUserRequest: UserReportRequest
     ): Call<UserReportResponse>
+
+    @POST("/deliveryPartyMember")
+    fun joinDeliveryParty(
+        @Header("Authorization") jwt: String?,
+        @Body joinPartyRequest: JoinPartyRequest
+    ): Call<JoinPartyResponse>
 }
\ No newline at end of file
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/LookParty/LookPartyFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.LookParty\r\n\r\nimport android.location.Geocoder\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.fragment.app.FragmentManager\r\nimport com.example.geeksasaeng.Home.Party.Retrofit.PartyDataService\r\nimport com.example.geeksasaeng.Home.Party.Retrofit.PartyDetailResult\r\nimport com.example.geeksasaeng.Home.Party.Retrofit.PartyDetailView\r\nimport com.example.geeksasaeng.MainActivity\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.Signup.DialogSignUpPhoneSkip\r\nimport com.example.geeksasaeng.Utils.BaseFragment\r\nimport com.example.geeksasaeng.databinding.FragmentLookPartyBinding\r\nimport net.daum.mf.map.api.MapPOIItem\r\nimport net.daum.mf.map.api.MapPoint\r\nimport net.daum.mf.map.api.MapView\r\nimport java.text.DecimalFormat\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.concurrent.timer\r\n\r\nclass LookPartyFragment: BaseFragment<FragmentLookPartyBinding>(FragmentLookPartyBinding::inflate), PartyDetailView,\r\n    DialogDeliveryOptionMyPopup.PopUpdateClickListener {\r\n\r\n    var deliveryItemId: Int? = null\r\n    var status: String? = null\r\n    var authorStatus: Boolean? = null\r\n    lateinit var partyData: PartyDetailResult\r\n    lateinit var mapView : MapView\r\n\r\n    private var remainTime : Long = 0\r\n    private var timerTask : Timer? = null\r\n\r\n    override fun initAfterBinding() {\r\n        initClickListener()\r\n        binding.lookPartyProgressBar.visibility = View.VISIBLE\r\n        binding.lookLocateText.isSelected = true // 물흐르는 애니메이션\r\n\r\n        // 파티 수정하기, 신고하기 Stack에서 제거\r\n        (context as MainActivity).supportFragmentManager.popBackStack(\"partyUpdate\", FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n        (context as MainActivity).supportFragmentManager.popBackStack(\"partyReport\", FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n\r\n        deliveryItemId = Integer.parseInt(arguments?.getString(\"deliveryItemId\"))\r\n        status = arguments?.getString(\"status\")\r\n\r\n        val handler = Handler()\r\n        handler.postDelayed({\r\n            initDeliveryPartyData()\r\n        }, 200)\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        timerTask?.cancel()\r\n        if (status == \"search\")\r\n            requireActivity().finish()\r\n    }\r\n\r\n    private fun initClickListener(){\r\n        binding.lookPartyBackBtn.setOnClickListener {\r\n            (context as MainActivity).supportFragmentManager.beginTransaction().remove(this).commit();\r\n            (context as MainActivity).supportFragmentManager.popBackStack();\r\n        }\r\n\r\n        binding.lookPartyOptionBtn.setOnClickListener {\r\n            val bundle = Bundle()\r\n            bundle.putInt(\"partyId\", deliveryItemId!!)\r\n            var dialogFragment = DialogFragment()\r\n            var dialogTag = String()\r\n\r\n            if (authorStatus == true) {\r\n                bundle.putBoolean(\"authorStatus\", partyData.authorStatus)\r\n                bundle.putString(\"chief\", partyData.chief)\r\n                bundle.putInt(\"chiefId\", partyData.chiefId)\r\n                bundle.putString(\"chiefProfileImgUrl\", partyData.chiefProfileImgUrl)\r\n                bundle.putString(\"content\", partyData.content)\r\n                bundle.putInt(\"currentMatching\", partyData.currentMatching)\r\n                bundle.putInt(\"dormitory\", partyData.dormitory)\r\n                bundle.putString(\"foodCategory\", partyData.foodCategory)\r\n                bundle.putBoolean(\"hashTag\", partyData.hashTag)\r\n                bundle.putInt(\"id\", partyData.id)\r\n                bundle.putDouble(\"latitude\", partyData.latitude)\r\n                bundle.putDouble(\"longitude\", partyData.longitude)\r\n                bundle.putString(\"matchingStatus\", partyData.matchingStatus)\r\n                bundle.putInt(\"maxMatching\", partyData.maxMatching)\r\n                bundle.putString(\"orderTime\", partyData.orderTime)\r\n                bundle.putString(\"storeUrl\", partyData.storeUrl)\r\n                bundle.putString(\"title\", partyData.title)\r\n                bundle.putString(\"updatedAt\", partyData.updatedAt)\r\n                dialogFragment = DialogDeliveryOptionMyPopup()\r\n                dialogTag = \"DeliveryPartyMyOption\"\r\n            }\r\n            else if (authorStatus == false) {\r\n                // TODO: 게시글 쓴 사람 ID 전달\r\n                bundle.putInt(\"reportedMemberId\", partyData.chiefId)\r\n                bundle.putInt(\"reportedDeliveryPartyId\", partyData.id)\r\n                dialogFragment = DialogDeliveryOptionOtherPopup()\r\n                dialogTag = \"DeliveryPartyOtherOption\"\r\n            }\r\n\r\n            dialogFragment.setArguments(bundle)\r\n            dialogFragment.show(childFragmentManager, dialogTag) // parent->child로 바꿈\r\n        }\r\n\r\n        binding.lookPartyRequestTv.setOnClickListener {\r\n            val dialog = DialogPartyRequest()\r\n            dialog.show(parentFragmentManager, \"partyRequest\")\r\n        }\r\n    }\r\n\r\n    private fun initDeliveryPartyData() {\r\n        val partyDetailService = PartyDataService()\r\n        partyDetailService.partyDetailSender(deliveryItemId!!)\r\n        partyDetailService.setPartyDetailView(this)\r\n    }\r\n\r\n    override fun partyDetailSuccess(result: PartyDetailResult) {\r\n        partyData = result\r\n\r\n        binding.lookPartyWhite.visibility = View.GONE\r\n        binding.lookPartyProgressBar.visibility = View.GONE\r\n\r\n        authorStatus = result.authorStatus\r\n\r\n        if (result?.chiefProfileImgUrl != null)\r\n            binding.lookHostProfile.setImageURI(Uri.parse(result?.chiefProfileImgUrl))\r\n        else // TODO: 기본 이미지 넣을 예정\r\n            binding.lookHostProfile.setImageResource(R.drawable.ic_default_profile)\r\n\r\n        binding.lookHostName.text = result.chief\r\n        binding.lookContent.text = result.content\r\n        binding.lookMatchingNumber.text = result.currentMatching.toString() + \"/\" + result.maxMatching\r\n        binding.lookCategoryText.text = result.foodCategory\r\n\r\n        if (result.hashTag)\r\n            binding.lookHashTag.visibility = View.VISIBLE\r\n        else\r\n            binding.lookHashTag.visibility = View.GONE\r\n\r\n        // 위도, 경도로 수령장소 문자 넣어주기 + 밑에 카카오지도 그리기\r\n        binding.lookLocateText.text = getAddress(result.latitude,  result.longitude)\r\n        val mapPoint = MapPoint.mapPointWithGeoCoord(result.latitude,result.longitude)\r\n        drawMap(mapPoint)\r\n\r\n\r\n        binding.lookTimeDate.text = \"${result.orderTime.substring(5, 7)}월 ${result.orderTime.substring(8, 10)}일\"\r\n        binding.lookTimeTime.text = \"${result.orderTime.substring(11, 13)}시 ${result.orderTime.substring(14, 16)}분\"\r\n\r\n        if (result.storeUrl.toString() != \"null\")\r\n            binding.lookLinkText.text = result.storeUrl\r\n        else {\r\n            binding.lookLink.visibility = View.GONE\r\n            binding.lookLinkText.visibility = View.GONE\r\n        }\r\n\r\n        binding.lookTitle.text = result.title\r\n        binding.lookPostDate.text = \"${result.updatedAt.substring(5, 7)}/${result.updatedAt.substring(8, 10)} ${result.updatedAt.substring(11, 16)}\"\r\n\r\n        //밑에 파란 바\r\n        binding.lookMemberStatus.text = result.currentMatching.toString()+\"/\"+result.maxMatching.toString()+ \" 명\"\r\n        remainTime = getRemainTime(result.orderTime)\r\n        startTimer()\r\n    }\r\n\r\n    override fun partyDetailFailure(code: Int, message: String) {\r\n        showToast(message)\r\n    }\r\n\r\n    //위도 경도로 주소 구하는 Reverse-GeoCoding (주소 String으로 반환 받을 수 있다)\r\n    private fun getAddress(latitude: Double, longitude: Double): String {\r\n        val geoCoder = Geocoder(context, Locale.KOREA)\r\n        var addr = \"주소 오류\"\r\n\r\n        try {\r\n            addr = geoCoder.getFromLocation(latitude, longitude, 1).first().getAddressLine(0)\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n        return addr\r\n    }\r\n\r\n    //맵 그리는 함수\r\n    private fun drawMap(mapPoint: MapPoint){\r\n        mapView = MapView(requireActivity())\r\n        mapView.setOnTouchListener { v, event ->\r\n            binding.lookPartySv.requestDisallowInterceptTouchEvent(true) //부모에게 Touch Event를 빼앗기지 않게 할 수 있다.\r\n            return@setOnTouchListener false\r\n        }\r\n        binding.lookKakaoMapLocation.addView(mapView)\r\n        //마커생성\r\n        val marker = MapPOIItem()\r\n        marker.itemName = \"요기?\"\r\n        marker.isShowCalloutBalloonOnTouch = false // 클릭시 말풍선을 보여줄지 여부 (false)\r\n        marker.mapPoint = mapPoint\r\n        mapView.addPOIItem(marker)\r\n        mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n    }\r\n\r\n    override fun onPopUpdateClicked() { // 수정하기 팝업 클릭하면,\r\n        binding.lookKakaoMapLocation.removeView(mapView) // 다른 프레그먼트 띄우기 전에 맵 사용해야하니까 지우기\r\n    }\r\n\r\n    // 타이머 작동\r\n    private fun startTimer() {\r\n        timerTask = timer(period = 1000) { //1초가 주기\r\n            val timeForm = DecimalFormat(\"00\") //0을 넣은 곳은 빈자리일 경우, 0으로 채워준다.\r\n            var remainSec = (remainTime) / 1000\r\n            var longHour = (remainSec / 3600)\r\n            var longMinute = ((remainSec % 3600) / 60)\r\n            var longSec = remainSec % 60\r\n\r\n\r\n            val hour = timeForm.format(longHour)\r\n            val min = timeForm.format(longMinute)\r\n            val sec = timeForm.format(longSec)\r\n\r\n            activity?.runOnUiThread {\r\n                binding.lookTimer.text = \"${hour}:${min}:${sec}\"\r\n\r\n                if (min == \"00\" && sec == \"00\"){\r\n                    timerTask?.cancel()\r\n                    binding.lookTimer.text = \"시간이 만료되었습니다.\"\r\n                }\r\n            }\r\n\r\n            if (remainTime.toInt() != 0) // time이 0이 아니라면\r\n                remainTime -= 1000 //1초씩 줄이기\r\n        }\r\n    }\r\n\r\n    private fun calculateToday(): String {\r\n        val nowTime = System.currentTimeMillis();\r\n        val date = Date(nowTime)\r\n        var dateFormat: SimpleDateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\r\n        return dateFormat.format(date)\r\n    }\r\n\r\n    private fun getRemainTime(orderTime: String): Long {\r\n        var orderYear = Integer.parseInt(orderTime.substring(0, 4))\r\n        var orderMonth = Integer.parseInt(orderTime.substring(5, 7))\r\n        var orderDay = Integer.parseInt(orderTime.substring(8, 10))\r\n        var orderHours = Integer.parseInt(orderTime.substring(11, 13))\r\n        var orderMinutes = Integer.parseInt(orderTime.substring(14, 16))\r\n        var orderSec = 0\r\n\r\n        var currentTime = calculateToday()\r\n        Log.d(\"current\", calculateToday().toString())\r\n        var todayYear = Integer.parseInt(currentTime.substring(0, 4))\r\n        var todayMonth = Integer.parseInt(currentTime.substring(5, 7))\r\n        var todayDay = Integer.parseInt(currentTime.substring(8, 10))\r\n        var todayHours = Integer.parseInt(currentTime.substring(11, 13))\r\n        var todayMinutes = Integer.parseInt(currentTime.substring(14, 16))\r\n        var todaySec = Integer.parseInt(currentTime.substring(17, 19))\r\n\r\n        var today = Calendar.getInstance().apply {\r\n            set(Calendar.YEAR, todayYear)\r\n            set(Calendar.MONTH, todayMonth)\r\n            set(Calendar.DAY_OF_MONTH, todayDay)\r\n        }.timeInMillis + (60000 * 60 * todayHours) + (60000 * todayMinutes) + (1000* todaySec)\r\n\r\n        var order = Calendar.getInstance().apply {\r\n            set(Calendar.YEAR, orderYear)\r\n            set(Calendar.MONTH, orderMonth)\r\n            set(Calendar.DAY_OF_MONTH, orderDay)\r\n        }.timeInMillis + (60000 * 60 * orderHours) + (60000 * orderMinutes) + (1000* 0)\r\n\r\n        var remainTime = order - today //남은 시간 밀리세컨드 단위\r\n\r\n        return remainTime\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/LookParty/LookPartyFragment.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/LookParty/LookPartyFragment.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/LookParty/LookPartyFragment.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/LookParty/LookPartyFragment.kt	(date 1659941484406)
@@ -108,8 +108,13 @@
         }
 
         binding.lookPartyRequestTv.setOnClickListener {
-            val dialog = DialogPartyRequest()
-            dialog.show(parentFragmentManager, "partyRequest")
+            // TODO: 일반 유저가 파티에 참여한 이후에 채팅방 가기로 글자 바꿔주기
+            if (authorStatus == true) {
+                // 채팅방으로 바로 갈 수 있도록 설정
+            } else if (authorStatus == false) {
+                val dialog = DialogPartyRequest()
+                dialog.show(parentFragmentManager, "partyRequest")
+            }
         }
     }
 
@@ -127,6 +132,10 @@
 
         authorStatus = result.authorStatus
 
+        // 글쓴이 -> 채팅방 가기로 초기 설정   |   일반 유저 -> 신청하기로 초기 설정
+        if (authorStatus == true) binding.lookPartyRequestTv.text = "채팅방 가기"
+        else if (authorStatus == false) binding.lookPartyRequestTv.text = "신청하기"
+
         if (result?.chiefProfileImgUrl != null)
             binding.lookHostProfile.setImageURI(Uri.parse(result?.chiefProfileImgUrl))
         else // TODO: 기본 이미지 넣을 예정
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.Retrofit\r\n\r\nimport com.example.geeksasaeng.Home.Delivery.DeliveryResponse\r\n\r\ninterface PartyView {\r\n}\r\n\r\ninterface PartyDetailView {\r\n    fun partyDetailSuccess(result: PartyDetailResult)\r\n    fun partyDetailFailure(code: Int, message: String)\r\n}\r\n\r\ninterface PartyDeleteView {\r\n    fun partyDeleteViewSuccess(code: Int)\r\n    fun partyDeleteViewFailure(message: String)\r\n}\r\n\r\ninterface PartyReportView {\r\n    fun partyReportViewSuccess(code: Int)\r\n    fun partyReportViewFailure(message: String)\r\n}\r\n\r\ninterface UserReportView {\r\n    fun userReportViewSuccess(code: Int)\r\n    fun userReportViewFailure(message: String)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyView.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyView.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyView.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/PartyView.kt	(date 1659937177361)
@@ -23,4 +23,9 @@
 interface UserReportView {
     fun userReportViewSuccess(code: Int)
     fun userReportViewFailure(message: String)
+}
+
+interface JoinPartyView {
+    fun joinPartyViewSuccess(code: Int)
+    fun joinPartyViewFailure(message: String)
 }
\ No newline at end of file
Index: app/src/main/res/values/themes.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources xmlns:tools=\"http://schemas.android.com/tools\">\r\n    <!-- Base application theme. -->\r\n    <style name=\"Theme.Geeksasaeng\" parent=\"Theme.AppCompat.Light.DarkActionBar\">\r\n        <!-- Primary brand color. -->\r\n        <item name=\"colorPrimary\">@color/main</item>\r\n        <item name=\"colorPrimaryVariant\">@color/status_bar</item>\r\n        <item name=\"colorOnPrimary\">@color/white</item>\r\n        <!-- Secondary brand color. -->\r\n        <item name=\"colorSecondary\">@color/teal_200</item>\r\n        <item name=\"colorSecondaryVariant\">@color/teal_700</item>\r\n        <item name=\"colorOnSecondary\">@color/black</item>\r\n        <!-- Status bar color. -->\r\n        <item name=\"android:statusBarColor\" tools:targetApi=\"l\">?attr/colorPrimaryVariant</item>\r\n        <!-- Customize your theme here. -->\r\n        <!-- Top Status Bar -->\r\n<!--        <item name=\"windowNoTitle\">true</item>-->\r\n<!--        <item name=\"android:windowTranslucentStatus\">true</item>-->\r\n        <item name=\"windowNoTitle\">true</item>\r\n        <item name=\"windowActionBar\">false</item>\r\n        <!-- EditText -->\r\n        <item name=\"colorControlActivated\">@color/main</item>\r\n        <item name=\"android:textSelectHandle\">@color/main</item>\r\n    </style>\r\n\r\n    <style name=\"Theme.Geeksasaeng.NoActionBar\">\r\n        <item name=\"windowActionBar\">false</item>\r\n        <item name=\"windowNoTitle\">true</item>\r\n    </style>\r\n\r\n    <style name=\"Theme.Geeksasaeng.AppBarOverlay\" parent=\"ThemeOverlay.AppCompat.Dark.ActionBar\" />\r\n\r\n    <style name=\"Theme.Geeksasaeng.PopupOverlay\" parent=\"ThemeOverlay.AppCompat.Light\" />\r\n</resources>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
--- a/app/src/main/res/values/themes.xml	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/res/values/themes.xml	(date 1659938390168)
@@ -19,7 +19,6 @@
         <item name="windowActionBar">false</item>
         <!-- EditText -->
         <item name="colorControlActivated">@color/main</item>
-        <item name="android:textSelectHandle">@color/main</item>
     </style>
 
     <style name="Theme.Geeksasaeng.NoActionBar">
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/DialogLocationUpdate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.UpdateParty\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Context.LOCATION_SERVICE\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.location.Address\r\nimport android.location.Geocoder\r\nimport android.location.LocationManager\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.text.Editable\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.airbnb.lottie.model.Marker\r\nimport com.example.geeksasaeng.Home.CreateParty.CreatePartyViewModel\r\nimport com.example.geeksasaeng.Home.CreateParty.DialogLink\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocView\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyService\r\nimport com.example.geeksasaeng.Home.Party.CreateParty.DialogLocation\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.databinding.ActivityCreatePartyBinding\r\nimport com.example.geeksasaeng.databinding.DialogLocationLayoutBinding\r\nimport com.example.geeksasaeng.databinding.DialogLocationLayoutUpdateBinding\r\nimport net.daum.mf.map.api.MapPOIItem\r\nimport net.daum.mf.map.api.MapPoint\r\nimport net.daum.mf.map.api.MapPoint.GeoCoordinate\r\nimport net.daum.mf.map.api.MapReverseGeoCoder\r\nimport net.daum.mf.map.api.MapView\r\nimport net.daum.mf.map.gen.KakaoMapLibraryAndroidMeta\r\nimport java.nio.file.Files.find\r\nimport java.util.*\r\n\r\nclass DialogLocationUpdate: DialogFragment(),\r\n    MapView.CurrentLocationEventListener, MapView.MapViewEventListener, MapView.POIItemEventListener {\r\n\r\n    lateinit var binding: DialogLocationLayoutUpdateBinding\r\n    private var dialogLocationUpdateClickListener: DialogLocationUpdateClickListener? =null\r\n    var REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)\r\n    private val GPS_ENABLE_REQUEST_CODE = 2001\r\n    private val PERMISSIONS_REQUEST_CODE = 100\r\n    lateinit var geocoder : Geocoder\r\n    lateinit var mapView : MapView\r\n    lateinit var mapPoint: MapPoint // TODO: 디폴트 맵포인트로 설정\r\n    var locFlag = false // 정보 전달 유무 플래그값\r\n    lateinit var marker : MapPOIItem\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        binding = DialogLocationLayoutUpdateBinding.inflate(inflater, container, false)\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT)) //레이아웃배경을 투명하게 해줌?\r\n        binding.dialogLocationUpdateLocTv.isSelected = true // 이걸 해줘야 물 흐르는 애니메이션이 가능\r\n        ininKakaoMap()\r\n        initData() //꼭 카카오맵 뒤에 있어야함\r\n        initClickListener()\r\n        return binding.root\r\n    }\r\n\r\n    //frag->Activity 정보전달용 코드 시작\r\n    interface DialogLocationUpdateClickListener{\r\n        fun onLocationClicked(mapPoint: MapPoint, locFlag: Boolean)\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        dialogLocationUpdateClickListener =  requireParentFragment() as DialogLocationUpdateClickListener\r\n    }\r\n\r\n    override fun onDetach() {\r\n        super.onDetach()\r\n        dialogLocationUpdateClickListener?.onLocationClicked(mapPoint, locFlag)\r\n        binding.dialogLocationUpdateKakaoMapView.removeView(mapView) // 다이얼로그 나가기전에 맵 없애주기\r\n        dialogLocationUpdateClickListener = null\r\n    }\r\n    //frag->Activity 정보전달용 코드 끝\r\n\r\n    private fun initData(){\r\n        val latitude = requireArguments().getDouble(\"latitude\")\r\n        val longitude = requireArguments().getDouble(\"longitude\")\r\n        this.mapPoint = MapPoint.mapPointWithGeoCoord(latitude,longitude)\r\n        Log.d(\"updateLoc\", mapPoint.toString())\r\n        drawMap(mapPoint)\r\n        setAddress(mapPoint)\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val width = resources.getDimensionPixelSize(R.dimen.popup_width)\r\n        val height = resources.getDimensionPixelSize(R.dimen.popup_height)\r\n        dialog?.window?.setLayout(width,height)\r\n    }\r\n\r\n\r\n    private fun ininKakaoMap(){\r\n\r\n        //현위치 트래킹\r\n/*      mapView.setCurrentLocationTrackingMode(MapView.CurrentLocationTrackingMode.TrackingModeOnWithHeading)\r\n        if (!checkLocationServicesStatus()) {\r\n            showDialogForLocationServiceSetting();\r\n        }else {\r\n            checkRunTimePermission();\r\n        }*/\r\n        geocoder = Geocoder(requireContext()) //지오코더 객체 획득\r\n    }\r\n\r\n    //위도 경도로 주소 구하는 Reverse-GeoCoding\r\n    private fun setAddress(position: MapPoint) { // tv에 text설정까지 이 함수에서 해준다.\r\n        val geoCoder = Geocoder(context, Locale.KOREA)\r\n        var addr = \"주소 오류\"\r\n\r\n        try {\r\n            addr = geoCoder.getFromLocation(position.mapPointGeoCoord.latitude, position.mapPointGeoCoord.longitude, 1).first().getAddressLine(0)\r\n            binding.dialogLocationUpdateLocTv.text = addr\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n    //https://bumjae.tistory.com/54 참조\r\n\r\n    private fun showDialogForLocationServiceSetting() {\r\n        val builder: AlertDialog.Builder = AlertDialog.Builder(requireContext())\r\n        builder.setTitle(\"위치 서비스 비활성화\")\r\n        builder.setMessage(\r\n            \"\"\"\r\n            앱을 사용하기 위해서는 위치 서비스가 필요합니다.\r\n            위치 설정을 수정하시겠습니까?\r\n            \"\"\".trimIndent()\r\n        )\r\n        builder.setCancelable(true)\r\n        builder.setPositiveButton(\"설정\", DialogInterface.OnClickListener { dialog, id ->\r\n            val callGPSSettingIntent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n            startActivityForResult(callGPSSettingIntent, GPS_ENABLE_REQUEST_CODE)\r\n        })\r\n        builder.setNegativeButton(\"취소\",\r\n            DialogInterface.OnClickListener { dialog, id -> dialog.cancel() })\r\n        builder.create().show()\r\n    }\r\n\r\n    fun checkLocationServicesStatus(): Boolean {\r\n        val locationManager : LocationManager = activity?.getSystemService(LOCATION_SERVICE) as LocationManager\r\n        return (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n                || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER))\r\n    }\r\n\r\n    override fun onCurrentLocationUpdate(mapView: MapView?, currentLocation: MapPoint?, accuracyInMeters: Float) {\r\n        val mapPointGeo: GeoCoordinate = currentLocation!!.getMapPointGeoCoord()\r\n        //지도 중심점 변경\r\n        mapView!!.setMapCenterPoint(MapPoint.mapPointWithCONGCoord(mapPointGeo.latitude,mapPointGeo.longitude), true)\r\n        Log.i(\r\n            \"currentLocation_log\",\r\n            java.lang.String.format(\r\n                \"MapView onCurrentLocationUpdate (%f,%f) accuracy (%f)\",\r\n                mapPointGeo.latitude,\r\n                mapPointGeo.longitude,\r\n                accuracyInMeters\r\n            )\r\n        )\r\n    }\r\n\r\n    override fun onCurrentLocationDeviceHeadingUpdate(p0: MapView?, p1: Float) {\r\n\r\n    }\r\n\r\n    override fun onCurrentLocationUpdateFailed(p0: MapView?) {\r\n\r\n    }\r\n\r\n    override fun onCurrentLocationUpdateCancelled(p0: MapView?) {\r\n\r\n    }\r\n\r\n    fun checkRunTimePermission() {\r\n\r\n        //런타임 퍼미션 처리\r\n        // 1. 위치 퍼미션을 가지고 있는지 체크합니다.\r\n        val hasFineLocationPermission = ContextCompat.checkSelfPermission(\r\n            requireContext(),\r\n            Manifest.permission.ACCESS_FINE_LOCATION\r\n        )\r\n        if (hasFineLocationPermission == PackageManager.PERMISSION_GRANTED) {\r\n            // 2. 이미 퍼미션을 가지고 있다면\r\n            // ( 안드로이드 6.0 이하 버전은 런타임 퍼미션이 필요없기 때문에 이미 허용된 걸로 인식합니다.)\r\n            // 3.  위치 값을 가져올 수 있음\r\n        } else {  //2. 퍼미션 요청을 허용한 적이 없다면 퍼미션 요청이 필요합니다. 2가지 경우(3-1, 4-1)가 있습니다.\r\n            // 3-1. 사용자가 퍼미션 거부를 한 적이 있는 경우에는\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                    context as Activity,\r\n                    REQUIRED_PERMISSIONS.get(0)\r\n                )\r\n            ) {\r\n                // 3-2. 요청을 진행하기 전에 사용자가에게 퍼미션이 필요한 이유를 설명해줄 필요가 있습니다.\r\n                Toast.makeText(requireContext(), \"이 앱을 실행하려면 위치 접근 권한이 필요합니다.\", Toast.LENGTH_LONG)\r\n                    .show()\r\n                // 3-3. 사용자게에 퍼미션 요청을 합니다. 요청 결과는 onRequestPermissionResult에서 수신됩니다.\r\n                ActivityCompat.requestPermissions(\r\n                    context as Activity, REQUIRED_PERMISSIONS,\r\n                    PERMISSIONS_REQUEST_CODE\r\n                )\r\n            } else {\r\n                // 4-1. 사용자가 퍼미션 거부를 한 적이 없는 경우에는 퍼미션 요청을 바로 합니다.\r\n                // 요청 결과는 onRequestPermissionResult에서 수신됩니다.\r\n                ActivityCompat.requestPermissions(\r\n                    context as Activity, REQUIRED_PERMISSIONS,\r\n                    PERMISSIONS_REQUEST_CODE\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initClickListener(){\r\n        binding.dialogLocationUpdateBtn.setOnClickListener {\r\n            locFlag = true // 정상적인 종료임을 표시\r\n            //자기는 종료\r\n            parentFragmentManager.beginTransaction().remove(this).commit()\r\n        }\r\n\r\n        //엔터치면 검색되게 하는 기능\r\n        binding.dialogLocationUpdateSearchEt.setOnKeyListener { _, keyCode, event ->\r\n            if ((event.action == KeyEvent.ACTION_DOWN) && (keyCode == KeyEvent.KEYCODE_ENTER)){\r\n                binding.dialogLocationUpdateSearchBtn.performClick()\r\n                true\r\n            }else{\r\n                false\r\n            }\r\n        }\r\n\r\n        //서치버튼\r\n        binding.dialogLocationUpdateSearchBtn.setOnClickListener {\r\n            //TODO: 서치시 이전 핀 없애주기\r\n            mapView.removePOIItem(marker) // 원래있던 마커 없애주기\r\n            var adr = binding.dialogLocationUpdateSearchEt.text.toString() // 주소 얻어오기\r\n            var list = geocoder.getFromLocationName(adr, 10)\r\n\r\n            if (list != null) {\r\n                if (list.size == 0) {\r\n                    binding.dialogLocationUpdateLocTv.setText(\"올바른 주소를 입력해주세요. \")\r\n                } else {\r\n                    val address: Address = list[0]\r\n                    val lat: Double = address.getLatitude() //위도\r\n                    val lon: Double = address.getLongitude() //경도\r\n                    Log.d(\"adr\", lat.toString()+\"/\"+lon.toString())\r\n                    this.mapPoint = MapPoint.mapPointWithGeoCoord(lat,lon) // 서치하면 맵포인트 설정됨 (mapPoint 이때 정의됨)\r\n                    //마커생성\r\n                    marker = MapPOIItem()\r\n                    marker.itemName = \"요기?\"\r\n                    marker.mapPoint = mapPoint\r\n                    marker.markerType = MapPOIItem.MarkerType.BluePin\r\n                    marker.selectedMarkerType = MapPOIItem.MarkerType.RedPin\r\n                    marker.isDraggable = true //드래그 가능하게 만들기\r\n\r\n                    mapView.addPOIItem(marker)\r\n                    mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n\r\n                    //Reverse Geo-Coding\r\n                    setAddress(this.mapPoint)\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onMapViewInitialized(p0: MapView?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewCenterPointMoved(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewZoomLevelChanged(p0: MapView?, p1: Int) {\r\n\r\n    }\r\n\r\n    override fun onMapViewSingleTapped(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDoubleTapped(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewLongPressed(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDragStarted(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDragEnded(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewMoveFinished(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n\r\n    // 마커 아이템 관련 이벤트 메소드\r\n    override fun onPOIItemSelected(p0: MapView?, p1: MapPOIItem?) {\r\n\r\n    }\r\n\r\n    override fun onCalloutBalloonOfPOIItemTouched(p0: MapView?, p1: MapPOIItem?) {\r\n\r\n    }\r\n\r\n    override fun onCalloutBalloonOfPOIItemTouched(\r\n        p0: MapView?,\r\n        p1: MapPOIItem?,\r\n        p2: MapPOIItem.CalloutBalloonButtonType?\r\n    ) {\r\n\r\n    }\r\n\r\n    //마커이동시 호출됨\r\n    override fun onDraggablePOIItemMoved(p0: MapView?, p1: MapPOIItem?, p2: MapPoint?) {\r\n        //!!\r\n        Log.d(\"map\", \"marker이동됨\")\r\n        mapView!!.setMapCenterPoint(p2, true)//지도 중심점 변경\r\n        this.mapPoint = p2!! // 맵포인트 수정\r\n        //역지오코딩\r\n        setAddress(p2)\r\n\r\n    }\r\n\r\n\r\n    private fun drawMap(mapPoint: MapPoint){\r\n        //맵  띄우기\r\n        mapView = MapView(activity)\r\n        binding.dialogLocationUpdateKakaoMapView.addView(mapView)\r\n        //마커생성\r\n        marker = MapPOIItem()\r\n        marker.itemName = \"요기?\"\r\n        marker.mapPoint = mapPoint\r\n        marker.isDraggable = true //드래그 가능하게 만들기\r\n        mapView.addPOIItem(marker)\r\n        mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n        mapView.setMapViewEventListener(this)\r\n        mapView.setPOIItemEventListener(this)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/DialogLocationUpdate.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/DialogLocationUpdate.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/DialogLocationUpdate.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/DialogLocationUpdate.kt	(date 1659937970544)
@@ -29,9 +29,6 @@
 import com.airbnb.lottie.model.Marker
 import com.example.geeksasaeng.Home.CreateParty.CreatePartyViewModel
 import com.example.geeksasaeng.Home.CreateParty.DialogLink
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocView
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyService
 import com.example.geeksasaeng.Home.Party.CreateParty.DialogLocation
 import com.example.geeksasaeng.R
 import com.example.geeksasaeng.databinding.ActivityCreatePartyBinding
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/DialogLocation.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.CreateParty\r\n\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.Context.LOCATION_SERVICE\r\nimport android.content.DialogInterface\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Color\r\nimport android.graphics.drawable.ColorDrawable\r\nimport android.location.Address\r\nimport android.location.Geocoder\r\nimport android.location.LocationManager\r\nimport android.os.Bundle\r\nimport android.provider.Settings\r\nimport android.text.Editable\r\nimport android.util.Log\r\nimport android.view.KeyEvent\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Toast\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.fragment.app.activityViewModels\r\nimport com.airbnb.lottie.model.Marker\r\nimport com.example.geeksasaeng.Home.CreateParty.CreatePartyViewModel\r\nimport com.example.geeksasaeng.Home.CreateParty.DialogLink\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocView\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyService\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.databinding.ActivityCreatePartyBinding\r\nimport com.example.geeksasaeng.databinding.DialogLocationLayoutBinding\r\nimport net.daum.mf.map.api.MapPOIItem\r\nimport net.daum.mf.map.api.MapPoint\r\nimport net.daum.mf.map.api.MapPoint.GeoCoordinate\r\nimport net.daum.mf.map.api.MapReverseGeoCoder\r\nimport net.daum.mf.map.api.MapView\r\nimport net.daum.mf.map.gen.KakaoMapLibraryAndroidMeta\r\nimport java.nio.file.Files.find\r\nimport java.util.*\r\n\r\nclass DialogLocation: DialogFragment(), CreatePartyDefaultLocView,\r\n    MapView.CurrentLocationEventListener, MapView.MapViewEventListener, MapView.POIItemEventListener {\r\n\r\n    lateinit var binding: DialogLocationLayoutBinding\r\n    private var dialogLocationNextClickListener: DialogLocationNextClickListener? =null\r\n    var LocationString = \"\"\r\n    var REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.ACCESS_FINE_LOCATION)\r\n    private val GPS_ENABLE_REQUEST_CODE = 2001\r\n    private val PERMISSIONS_REQUEST_CODE = 100\r\n    lateinit var geocoder : Geocoder\r\n    lateinit var mapView : MapView\r\n    lateinit var mapPoint: MapPoint // TODO: 디폴트 맵포인트로 설정\r\n    var locFlag = false // 플래그값\r\n    lateinit var marker : MapPOIItem\r\n\r\n    private lateinit var createPartyService: CreatePartyService\r\n\r\n    private val createPartyVM: CreatePartyViewModel by activityViewModels()\r\n\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\r\n        binding = DialogLocationLayoutBinding.inflate(inflater, container, false)\r\n        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT)) //레이아웃배경을 투명하게 해줌?\r\n        binding.locationDialogLocTv.isSelected = true\r\n        ininKakaoMap()\r\n        initData() //꼭 카카오맵 뒤에 있어야함\r\n        initClickListener()\r\n        return binding.root\r\n    }\r\n\r\n    private fun initData(){\r\n        if(createPartyVM.getMapPoint().toString()!=\"null\"){ // 이미 입력되어있는 mapPoint가 있으면 띄워주기\r\n            drawMap(createPartyVM.getMapPoint()!!)\r\n            setAddress(createPartyVM.getMapPoint()!!)\r\n        }else { // 디폴트로 맵 그려주기\r\n            //TODO: DormitoryId는 어디서 얻어오지?\r\n            createPartyService.getDefaultLoc(1) //★ default 기숙사 위치 불러오는 함수 호출 => 이게 성공하면 onSuccess에서 맵까지 그려줌\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        val width = resources.getDimensionPixelSize(R.dimen.popup_width)\r\n        val height = resources.getDimensionPixelSize(R.dimen.popup_height)\r\n        dialog?.window?.setLayout(width,height)\r\n    }\r\n\r\n    //frag->Activity 정보전달용 코드 시작\r\n    interface DialogLocationNextClickListener{\r\n        fun onLocationClicked(loc:String, mapPoint: MapPoint, locFlag: Boolean)\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        dialogLocationNextClickListener = activity as DialogLocationNextClickListener\r\n    }\r\n\r\n    override fun onDetach() {\r\n        super.onDetach()\r\n        Log.d(\"location\", binding.locationDialogLocTv.text.toString()+\"Detached\")\r\n        if(binding.locationDialogLocTv.text!=\"주소를 입력해주세요\"&&binding.locationDialogLocTv.text!=\"올바른 주소를 입력해주세요. \"){\r\n            locFlag = true // locFlag가 true면 정보를 바꿔주기 위함이다.\r\n        }\r\n        LocationString = binding.locationDialogLocTv.text.toString() // 지금 현재 정보 (주소: ~~ 기준) 가져오기\r\n\r\n        //TODO: 사실 얘도 VM에 있어서 인자로 넘겨줄 필요가 없긴한뎅,,,,\r\n        dialogLocationNextClickListener?.onLocationClicked(LocationString, createPartyVM.getMapPoint()!!, locFlag) //frag-> activity 정보전달 (완료 버튼을 눌렀을 떄만)\r\n        //지금 맵포인트는 초기에 기숙사 deafult위치 불러올때랑, 검색했을때, 마커옮겼을때 정의되므로, (LocationString, mapPoint, locFlag) 이 매개변수 대신에 VM이용\r\n\r\n        binding.locationDialogKakaoMapView.removeView(mapView) // 다이얼로그 나가기전에 맵 없애주기\r\n        dialogLocationNextClickListener = null\r\n    }\r\n    //frag->Activity 정보전달용 코드 끝\r\n\r\n    private fun ininKakaoMap(){\r\n        createPartyService = CreatePartyService() //서비스 객체 생성\r\n        createPartyService.setCreatePartyDefaultLocView(this)\r\n\r\n        //현위치 트래킹\r\n/*      mapView.setCurrentLocationTrackingMode(MapView.CurrentLocationTrackingMode.TrackingModeOnWithHeading)\r\n        if (!checkLocationServicesStatus()) {\r\n            showDialogForLocationServiceSetting();\r\n        }else {\r\n            checkRunTimePermission();\r\n        }*/\r\n        geocoder = Geocoder(requireContext()) //지오코더 객체 획득\r\n    }\r\n\r\n    //위도 경도로 주소 구하는 Reverse-GeoCoding\r\n    private fun setAddress(position: MapPoint) { // tv에 text설정까지 이 함수에서 해준다.\r\n        val geoCoder = Geocoder(context, Locale.KOREA)\r\n        var addr = \"주소 오류\"\r\n\r\n        try {\r\n            addr = geoCoder.getFromLocation(position.mapPointGeoCoord.latitude, position.mapPointGeoCoord.longitude, 1).first().getAddressLine(0)\r\n            binding.locationDialogLocTv.text = addr\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n    //https://bumjae.tistory.com/54 참조\r\n\r\n    private fun showDialogForLocationServiceSetting() {\r\n        val builder: AlertDialog.Builder = AlertDialog.Builder(requireContext())\r\n        builder.setTitle(\"위치 서비스 비활성화\")\r\n        builder.setMessage(\r\n            \"\"\"\r\n            앱을 사용하기 위해서는 위치 서비스가 필요합니다.\r\n            위치 설정을 수정하시겠습니까?\r\n            \"\"\".trimIndent()\r\n        )\r\n        builder.setCancelable(true)\r\n        builder.setPositiveButton(\"설정\", DialogInterface.OnClickListener { dialog, id ->\r\n            val callGPSSettingIntent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n            startActivityForResult(callGPSSettingIntent, GPS_ENABLE_REQUEST_CODE)\r\n        })\r\n        builder.setNegativeButton(\"취소\",\r\n            DialogInterface.OnClickListener { dialog, id -> dialog.cancel() })\r\n        builder.create().show()\r\n    }\r\n\r\n    fun checkLocationServicesStatus(): Boolean {\r\n        val locationManager : LocationManager = activity?.getSystemService(LOCATION_SERVICE) as LocationManager\r\n        return (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n                || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER))\r\n    }\r\n\r\n    override fun onCurrentLocationUpdate(mapView: MapView?, currentLocation: MapPoint?, accuracyInMeters: Float) {\r\n        val mapPointGeo: GeoCoordinate = currentLocation!!.getMapPointGeoCoord()\r\n        //지도 중심점 변경\r\n        mapView!!.setMapCenterPoint(MapPoint.mapPointWithCONGCoord(mapPointGeo.latitude,mapPointGeo.longitude), true)\r\n        Log.i(\r\n            \"currentLocation_log\",\r\n            java.lang.String.format(\r\n                \"MapView onCurrentLocationUpdate (%f,%f) accuracy (%f)\",\r\n                mapPointGeo.latitude,\r\n                mapPointGeo.longitude,\r\n                accuracyInMeters\r\n            )\r\n        )\r\n    }\r\n\r\n    override fun onCurrentLocationDeviceHeadingUpdate(p0: MapView?, p1: Float) {\r\n\r\n    }\r\n\r\n    override fun onCurrentLocationUpdateFailed(p0: MapView?) {\r\n\r\n    }\r\n\r\n    override fun onCurrentLocationUpdateCancelled(p0: MapView?) {\r\n\r\n    }\r\n\r\n    fun checkRunTimePermission() {\r\n\r\n        //런타임 퍼미션 처리\r\n        // 1. 위치 퍼미션을 가지고 있는지 체크합니다.\r\n        val hasFineLocationPermission = ContextCompat.checkSelfPermission(\r\n            requireContext(),\r\n            Manifest.permission.ACCESS_FINE_LOCATION\r\n        )\r\n        if (hasFineLocationPermission == PackageManager.PERMISSION_GRANTED) {\r\n            // 2. 이미 퍼미션을 가지고 있다면\r\n            // ( 안드로이드 6.0 이하 버전은 런타임 퍼미션이 필요없기 때문에 이미 허용된 걸로 인식합니다.)\r\n            // 3.  위치 값을 가져올 수 있음\r\n        } else {  //2. 퍼미션 요청을 허용한 적이 없다면 퍼미션 요청이 필요합니다. 2가지 경우(3-1, 4-1)가 있습니다.\r\n            // 3-1. 사용자가 퍼미션 거부를 한 적이 있는 경우에는\r\n            if (ActivityCompat.shouldShowRequestPermissionRationale(\r\n                    context as Activity,\r\n                    REQUIRED_PERMISSIONS.get(0)\r\n                )\r\n            ) {\r\n                // 3-2. 요청을 진행하기 전에 사용자가에게 퍼미션이 필요한 이유를 설명해줄 필요가 있습니다.\r\n                Toast.makeText(requireContext(), \"이 앱을 실행하려면 위치 접근 권한이 필요합니다.\", Toast.LENGTH_LONG)\r\n                    .show()\r\n                // 3-3. 사용자게에 퍼미션 요청을 합니다. 요청 결과는 onRequestPermissionResult에서 수신됩니다.\r\n                ActivityCompat.requestPermissions(\r\n                    context as Activity, REQUIRED_PERMISSIONS,\r\n                    PERMISSIONS_REQUEST_CODE\r\n                )\r\n            } else {\r\n                // 4-1. 사용자가 퍼미션 거부를 한 적이 없는 경우에는 퍼미션 요청을 바로 합니다.\r\n                // 요청 결과는 onRequestPermissionResult에서 수신됩니다.\r\n                ActivityCompat.requestPermissions(\r\n                    context as Activity, REQUIRED_PERMISSIONS,\r\n                    PERMISSIONS_REQUEST_CODE\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun initClickListener(){\r\n        binding.locationDialogNextBtn.setOnClickListener {\r\n            //마지막 페이지이므로 그냥 종료\r\n            //자기는 종료\r\n            activity?.supportFragmentManager?.beginTransaction()?.remove(this)?.commit()\r\n        }\r\n\r\n        binding.locationDialogBackBtn.setOnClickListener {\r\n            //이전 다이얼로그 실행\r\n            val dialogLink = DialogLink()\r\n            dialogLink.show(parentFragmentManager, \"CustomDialog\")\r\n\r\n            //자기는 종료\r\n            activity?.supportFragmentManager?.beginTransaction()?.remove(this)?.commit()\r\n        }\r\n\r\n        binding.locationDialogSearchEt.setOnKeyListener { _, keyCode, event ->\r\n            if ((event.action == KeyEvent.ACTION_DOWN) && (keyCode == KeyEvent.KEYCODE_ENTER)){\r\n                binding.locationDialogSearchBtn.performClick()\r\n                true\r\n            }else{\r\n                false\r\n            }\r\n        }\r\n\r\n        //서치버튼\r\n        binding.locationDialogSearchBtn.setOnClickListener {\r\n            //TODO: 서치시 이전 핀 없애주기\r\n            mapView.removePOIItem(marker) // 원래있던 마커 없애주기\r\n            var adr = binding.locationDialogSearchEt.text.toString() // 주소 얻어오기\r\n            var list = geocoder.getFromLocationName(adr, 10)\r\n\r\n            if (list != null) {\r\n                if (list.size == 0) {\r\n                    binding.locationDialogLocTv.setText(\"올바른 주소를 입력해주세요. \")\r\n                } else {\r\n                    val address: Address = list[0]\r\n                    val lat: Double = address.getLatitude() //위도\r\n                    val lon: Double = address.getLongitude() //경도\r\n                    Log.d(\"adr\", lat.toString()+\"/\"+lon.toString())\r\n                    this.mapPoint = MapPoint.mapPointWithGeoCoord(lat,lon) // 서치하면 맵포인트 설정됨 (mapPoint 이때 정의됨)\r\n                    createPartyVM.setMapPoint(this.mapPoint) //★ VM에도 저장 //\r\n                    //마커생성\r\n                    marker = MapPOIItem()\r\n                    marker.itemName = \"요기?\"\r\n                    marker.mapPoint = mapPoint\r\n                    marker.markerType = MapPOIItem.MarkerType.BluePin\r\n                    marker.selectedMarkerType = MapPOIItem.MarkerType.RedPin\r\n                    marker.isDraggable = true //드래그 가능하게 만들기\r\n\r\n                    mapView.addPOIItem(marker)\r\n                    mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n\r\n                    //Reverse Geo-Coding\r\n                    setAddress(this.mapPoint)\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onMapViewInitialized(p0: MapView?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewCenterPointMoved(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewZoomLevelChanged(p0: MapView?, p1: Int) {\r\n\r\n    }\r\n\r\n    override fun onMapViewSingleTapped(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDoubleTapped(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewLongPressed(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDragStarted(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewDragEnded(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n    override fun onMapViewMoveFinished(p0: MapView?, p1: MapPoint?) {\r\n\r\n    }\r\n\r\n\r\n    // 마커 아이템 관련 이벤트 메소드\r\n    override fun onPOIItemSelected(p0: MapView?, p1: MapPOIItem?) {\r\n\r\n    }\r\n\r\n    override fun onCalloutBalloonOfPOIItemTouched(p0: MapView?, p1: MapPOIItem?) {\r\n\r\n    }\r\n\r\n    override fun onCalloutBalloonOfPOIItemTouched(\r\n        p0: MapView?,\r\n        p1: MapPOIItem?,\r\n        p2: MapPOIItem.CalloutBalloonButtonType?\r\n    ) {\r\n\r\n    }\r\n\r\n    //마커이동시 호출됨\r\n    override fun onDraggablePOIItemMoved(p0: MapView?, p1: MapPOIItem?, p2: MapPoint?) {\r\n        //!!\r\n        Log.d(\"map\", \"marker이동됨\")\r\n        mapView!!.setMapCenterPoint(p2, true)//지도 중심점 변경\r\n        this.mapPoint = p2!! // 맵포인트 수정\r\n        createPartyVM.setMapPoint(this.mapPoint) //★ VM에도 저장 //\r\n\r\n        //역지오코딩\r\n        setAddress(p2)\r\n\r\n    }\r\n\r\n    override fun onDefaultLocSuccess(result: CreatePartyDefaultLocResult) {\r\n        this.mapPoint = MapPoint.mapPointWithGeoCoord(result.latitude,result.longitude) // default로 맵포인트 설정됨\r\n        createPartyVM.setMapPoint(this.mapPoint) //★ VM에도 저장 //\r\n        drawMap(mapPoint) // 지도 그리기\r\n        setAddress(mapPoint) //tv에 주소 띄우기\r\n    }\r\n\r\n    override fun onDefaultLocFailure() {\r\n    }\r\n\r\n    private fun drawMap(mapPoint: MapPoint){\r\n        //맵  띄우기\r\n        mapView = MapView(activity)\r\n        binding.locationDialogKakaoMapView.addView(mapView)\r\n        //마커생성\r\n        marker = MapPOIItem()\r\n        marker.itemName = \"요기?\"\r\n        marker.mapPoint = mapPoint\r\n        marker.isDraggable = true //드래그 가능하게 만들기\r\n        mapView.addPOIItem(marker)\r\n        mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n        mapView.setMapViewEventListener(this)\r\n        mapView.setPOIItemEventListener(this)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/DialogLocation.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/DialogLocation.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/DialogLocation.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/DialogLocation.kt	(date 1659937866689)
@@ -29,9 +29,9 @@
 import com.airbnb.lottie.model.Marker
 import com.example.geeksasaeng.Home.CreateParty.CreatePartyViewModel
 import com.example.geeksasaeng.Home.CreateParty.DialogLink
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocView
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyService
+import com.example.geeksasaeng.Home.Party.Retrofit.CreatePartyDefaultLocResult
+import com.example.geeksasaeng.Home.Party.Retrofit.CreatePartyDefaultLocView
+import com.example.geeksasaeng.Home.Party.Retrofit.CreatePartyService
 import com.example.geeksasaeng.R
 import com.example.geeksasaeng.databinding.ActivityCreatePartyBinding
 import com.example.geeksasaeng.databinding.DialogLocationLayoutBinding
@@ -44,8 +44,7 @@
 import java.nio.file.Files.find
 import java.util.*
 
-class DialogLocation: DialogFragment(), CreatePartyDefaultLocView,
-    MapView.CurrentLocationEventListener, MapView.MapViewEventListener, MapView.POIItemEventListener {
+class DialogLocation: DialogFragment(), CreatePartyDefaultLocView, MapView.CurrentLocationEventListener, MapView.MapViewEventListener, MapView.POIItemEventListener {
 
     lateinit var binding: DialogLocationLayoutBinding
     private var dialogLocationNextClickListener: DialogLocationNextClickListener? =null
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyView.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyView.kt
rename from app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyView.kt
rename to app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyView.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyView.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyView.kt	(date 1659937177426)
@@ -1,4 +1,4 @@
-package com.example.geeksasaeng.Home.CreateParty.Retrofit
+package com.example.geeksasaeng.Home.Party.Retrofit
 
 interface CreatePartyDefaultLocView{
     fun onDefaultLocSuccess(result: CreatePartyDefaultLocResult)
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyService.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyService.kt
rename from app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyService.kt
rename to app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyService.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyService.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyService.kt	(date 1659937177458)
@@ -1,4 +1,4 @@
-package com.example.geeksasaeng.Home.CreateParty.Retrofit
+package com.example.geeksasaeng.Home.Party.Retrofit
 
 import android.location.Address
 import android.location.Geocoder
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyRetrofitInterfaces.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyRetrofitInterfaces.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyRetrofitInterfaces.kt
rename from app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyRetrofitInterfaces.kt
rename to app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyRetrofitInterfaces.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyRetrofitInterfaces.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyRetrofitInterfaces.kt	(date 1659937177374)
@@ -1,4 +1,4 @@
-package com.example.geeksasaeng.Home.CreateParty.Retrofit
+package com.example.geeksasaeng.Home.Party.Retrofit
 
 import retrofit2.Call
 import retrofit2.http.*
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/CreatePartyActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.CreateParty\r\n\r\nimport android.graphics.Color\r\nimport android.location.Geocoder\r\nimport android.os.Bundle\r\nimport android.os.PersistableBundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.*\r\nimport com.example.geeksasaeng.Home.Party.CreateParty.DialogCategory\r\nimport com.example.geeksasaeng.Home.Party.CreateParty.DialogDt\r\nimport com.example.geeksasaeng.Home.Party.CreateParty.DialogLocation\r\nimport com.example.geeksasaeng.Home.Party.CreateParty.DialogNum\r\nimport com.example.geeksasaeng.MainActivity\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.Utils.BaseActivity\r\nimport com.example.geeksasaeng.databinding.ActivityCreatePartyBinding\r\nimport net.daum.mf.map.api.MapPOIItem\r\nimport net.daum.mf.map.api.MapPoint\r\nimport net.daum.mf.map.api.MapView\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\n//TODO: 여기서는 잘하면 CreatePartyDefaultLocView 이거 없이도 가능할지도? 7.30-31에 이 부분 다시 봐보기\r\nclass CreatePartyActivity : BaseActivity<ActivityCreatePartyBinding>(ActivityCreatePartyBinding::inflate), CreatePartyDefaultLocView, CreatePartyView,\r\n    DialogDt.DialogDtNextClickListener, DialogNum.DialogNumNextClickListener, DialogCategory.DialogCategoryNextClickListener, DialogLink.DialogLinkNextClickListener, DialogLocation.DialogLocationNextClickListener {\r\n\r\n    lateinit var mapView : MapView\r\n    lateinit var mapPoint: MapPoint\r\n\r\n    private lateinit var createPartyService: CreatePartyService\r\n    private lateinit var createPartyVM: CreatePartyViewModel\r\n\r\n    override fun initAfterBinding() {\r\n        createPartyVM = ViewModelProvider(this).get(CreatePartyViewModel::class.java)\r\n        binding.createPartyNumber2Tv.isEnabled = false\r\n        binding.createPartyCategory2Tv.isEnabled = false\r\n        binding.createPartyLink2Tv.isEnabled = false\r\n        binding.createPartyLocation2Tv.isEnabled = false\r\n        createPartyService = CreatePartyService() //서비스 객체 생성\r\n        createPartyService.setCreatePartyDefaultLocView(this)\r\n        createPartyService.setCreatePartyView(this)\r\n\r\n        getApplicationContext()\r\n        initTextWatcher()\r\n        initClickListener()\r\n        initKakaoMap()\r\n    }\r\n\r\n/*    override fun onSaveInstanceState(outState: Bundle, outPersistentState: PersistableBundle) {\r\n        super.onSaveInstanceState(outState, outPersistentState)\r\n        val title = binding.createPartyTitleEt.text\r\n        val content = binding.createPartyContentEt.text\r\n        outState.putCharSequence(\"title\", title)\r\n        outState.putCharSequence(\"content\", content)\r\n    }\r\n\r\n    override fun onRestoreInstanceState(savedInstanceState: Bundle) {\r\n        super.onRestoreInstanceState(savedInstanceState)\r\n        val title = savedInstanceState.getCharSequence(\"title\")\r\n        val content = savedInstanceState.getCharSequence(\"content\")\r\n        binding.createPartyTitleEt.setText(title)\r\n        binding.createPartyContentEt.setText(content)\r\n    }*/\r\n\r\n    private fun initTextWatcher(){\r\n        binding.createPartyTitleEt.addTextChangedListener ( object: TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                checking()\r\n            }\r\n        } )\r\n\r\n        binding.createPartyContentEt.addTextChangedListener ( object: TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}\r\n            override fun afterTextChanged(s: Editable?) {\r\n                checking()\r\n            }\r\n        } )\r\n    }\r\n\r\n    private fun initKakaoMap(){\r\n        Log.d(\"kakaodefault\", \"onstart\")\r\n        createPartyService.getDefaultLoc(1) //★ default 기숙사 위치 불러오는 함수 호출\r\n    }\r\n\r\n\r\n    private fun checking()  {\r\n        //TODO: 왜 등록이 안되는지 정보가 좀 부족한것 같아..!\r\n        Log.d(\"checking\",(binding.createPartyTitleEt.text.length in 1..20).toString()+\"/\"+(binding.createPartyContentEt.text.length in 1..500).toString()+\"/\"+(createPartyVM.getDate2().toString() != \"null\").toString()+\"/\"+\r\n                (createPartyVM.getTime2().toString() != \"null\").toString()+\"/\"+(createPartyVM.getMaxMatching().toString() != \"null\").toString()+\"/\"+\r\n                (createPartyVM.getCategory().toString() != \"null\").toString()+\"/\"+(createPartyVM.getMapPoint().toString() != \"null\").toString())\r\n        if ((binding.createPartyTitleEt.text.length in 1..20)&&\r\n                (binding.createPartyContentEt.text.length in 1..500) &&\r\n                createPartyVM.getDate2().toString() != \"null\" &&\r\n                createPartyVM.getTime2().toString() != \"null\" &&\r\n                compareDate(createPartyVM.getDate2().toString() +\" \"+ createPartyVM.getTime2().toString()) &&\r\n                createPartyVM.getMaxMatching().toString() != \"null\" &&\r\n                createPartyVM.getCategory().toString() != \"null\" &&\r\n                createPartyVM.getMapPoint().toString() != \"null\")\r\n        { // 등록조건이 만족되면,\r\n            binding.createPartyRegisterBtnTv.setTextColor(ContextCompat.getColor(this@CreatePartyActivity, R.color.main))\r\n            if(!binding.createPartyRegisterBtnTv.isEnabled){\r\n                binding.createPartyRegisterBtnTv.isEnabled = true\r\n            }\r\n        }else{\r\n            binding.createPartyRegisterBtnTv.setTextColor((Color.parseColor(\"#BABABA\")))\r\n            binding.createPartyRegisterBtnTv.isEnabled = false\r\n        }\r\n    }\r\n\r\n\r\n    private fun compareDate(time: String): Boolean{ //현재보다 미래인지 체크 위함\r\n        var sdf = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\")\r\n        val date1 = sdf.parse(time)\r\n        val currentTime = Calendar.getInstance().time\r\n\r\n        Log.d(\"compareDate\", date1.after(currentTime).toString())\r\n        return date1.after(currentTime)\r\n    }\r\n\r\n    private fun initClickListener(){\r\n\r\n        binding.createPartyBackBtnIv.setOnClickListener {\r\n            startActivityWithClear(MainActivity::class.java)\r\n        }\r\n\r\n        binding.createPartyRegisterBtnTv.setOnClickListener { //등록버튼 클릭시\r\n            //TODO: \"2022-07-26 16:29:30\" => 이 시간형식은 어떻게 구할까..\r\n\r\n            Log.d(\"jjang\", binding.createPartyContentEt.text.toString()+\"/\"+  createPartyVM.getCategoryInt()!!.toString()+\"/\"+ binding.createPartyTogetherCheckBtn.isChecked.toString()+\"/\"+  createPartyVM.getMapPoint()!!.mapPointGeoCoord.latitude.toString() +\"/\"+  createPartyVM.getMapPoint()!!.mapPointGeoCoord.longitude.toString()+\"/\"+  createPartyVM.getMaxMatching()!!.toString() +\"/\"+ createPartyVM.getDate2().toString()+ \" \" + createPartyVM.getTime2().toString() +\"/\"+  createPartyVM.getStoreUrl()!!.toString() +\"/\"+ binding.createPartyTitleEt.text.toString())\r\n            val createPartyRequest = CreatePartyRequest(binding.createPartyContentEt.text.toString(), createPartyVM.getCategoryInt()!!, binding.createPartyTogetherCheckBtn.isChecked, createPartyVM.getMapPoint()!!.mapPointGeoCoord.latitude, createPartyVM.getMapPoint()!!.mapPointGeoCoord.longitude,\r\n                createPartyVM.getMaxMatching()!!, createPartyVM.getDate2().toString()+ \" \" + createPartyVM.getTime2().toString(), createPartyVM.getStoreUrl()!!, binding.createPartyTitleEt.text.toString())\r\n            createPartyService.createPartySender(1, createPartyRequest) //★파티 등록하기\r\n            startActivityWithClear(MainActivity::class.java)\r\n        }\r\n\r\n        binding.createPartyTogetherCheckBtn.setOnCheckedChangeListener { //같이 먹고 싶어요 체크버튼 클릭시\r\n                buttonView, isChecked ->\r\n            if (isChecked) {\r\n                binding.createPartyTogetherTv.setTextColor(ContextCompat.getColor(this, R.color.main))\r\n            } else {\r\n                binding.createPartyTogetherTv.setTextColor(ContextCompat.getColor(this,R.color.gray_2))\r\n            }\r\n        }\r\n\r\n        binding.createPartyTogetherTv.setOnClickListener {\r\n            //체크되어있었으면 해제, 안체크 되어있었으면 체크 시키기\r\n            binding.createPartyTogetherCheckBtn.isChecked = !binding.createPartyTogetherCheckBtn.isChecked\r\n        }\r\n\r\n        //<여기서부터 배달 생성에 필요한 정보 입력 부분>\r\n        //주문예정시간 tv 클릭시 (파란색)\r\n        binding.createPartyDate2ColoredTv.setOnClickListener {\r\n            // activity에서 커스텀 다이얼로그 띄우는 코드\r\n            DialogDt().show(supportFragmentManager, \"CustomDialog\")\r\n            binding.createPartyNumber2Tv.isEnabled = true\r\n            binding.createPartyCategory2Tv.isEnabled = true\r\n            binding.createPartyLink2Tv.isEnabled =true\r\n            binding.createPartyLocation2Tv.isEnabled = true\r\n        }\r\n\r\n        //주문예정시간 tv 클릭시\r\n        binding.createPartyDate2Tv.setOnClickListener {\r\n            // activity에서 커스텀 다이얼로그 띄우는 코드\r\n            DialogDt().show(supportFragmentManager, \"CustomDialog\")\r\n        }\r\n\r\n        //매칭 인원 tv\r\n        binding.createPartyNumber2Tv.setOnClickListener {\r\n            DialogNum().show(supportFragmentManager, \"CustomDialog\")\r\n        }\r\n\r\n        //카테고리 tv\r\n        binding.createPartyCategory2Tv.setOnClickListener {\r\n            DialogCategory().show(supportFragmentManager, \"CustomDialog\")\r\n        }\r\n\r\n        //링크 tv\r\n        binding.createPartyLink2Tv.setOnClickListener {\r\n            DialogLink().show(supportFragmentManager, \"CustomDialog\")\r\n        }\r\n\r\n        //수령장소 tv\r\n        binding.createPartyLocation2Tv.setOnClickListener {\r\n            binding.createPartyKakaoMapLocation.removeView(mapView) // 맵 사용해야하니까 지우기\r\n            DialogLocation().show(supportFragmentManager, \"CustomDialog\")\r\n        }\r\n\r\n    }\r\n\r\n    //다이얼로그에서 next버튼 클릭시 값 받아오기\r\n    override fun onDtClicked(date: String, time: String) {\r\n        //사용자가 선택한 날짜 표시\r\n        binding.createPartyDate2Tv.setTextColor(ContextCompat.getColor(this, R.color.black))\r\n        if(date==\"\"||time==\"\"){ // 정보가 하나라도 부족하면\r\n            binding.createPartyDate2Tv.text = \"주문 예정 시간을 입력해주세요\"\r\n        }else{\r\n            binding.createPartyDate2Tv.text = date+ \" \" + time\r\n        }\r\n\r\n        //파란색 버튼 없애고 회색버튼으로 띄우기\r\n        binding.createPartyDate2Tv.visibility = View.VISIBLE\r\n        binding.createPartyDate2ColoredTv.visibility = View.INVISIBLE\r\n        checking()\r\n    }\r\n\r\n    override fun onNumClicked(num: String) {\r\n        //사용자가 선택한 인원수 표시\r\n        binding.createPartyNumber2Tv.setTextColor(ContextCompat.getColor(this,R.color.black))\r\n        binding.createPartyNumber2Tv.text = num\r\n        checking()\r\n    }\r\n\r\n    override fun onCategoryClicked(category: String) {\r\n        //사용자가 선택한 카테고리 표시\r\n        binding.createPartyCategory2Tv.setTextColor(ContextCompat.getColor(this,R.color.black))\r\n        binding.createPartyCategory2Tv.text = category\r\n        checking()\r\n    }\r\n\r\n    override fun onLinkClicked(link: String, flagNext: Boolean) { //flagNext는 카카오 지도 때문에 이용\r\n        //사용자가 선택한 식당 링크 표시\r\n        binding.createPartyLink2Tv.setTextColor(ContextCompat.getColor(this,R.color.black))\r\n        binding.createPartyLink2Tv.text = link\r\n        if(flagNext){ //링크 다이얼로그 => 위치 다이얼로그로 넘어간 경우에만 맵 삭제\r\n            binding.createPartyKakaoMapLocation.removeView(mapView) // 이제 link에서 다음을 클릭했다는 건 DialogLocation에서 지도 띄워야하니까 파티 생성하기 맵뷰는 삭제해주기\r\n        }\r\n        checking()\r\n    }\r\n\r\n    //TODO: locFlag 필요 없네,,,>?? 지우자\r\n    override fun onLocationClicked(loc: String, mapPoint: MapPoint, locFlag: Boolean) {\r\n        //locFlag가 아마 다이얼로그 바깥을 클릭했는지 , 완료로 탈출했는지 여부를 알려주는 걸꺼야\r\n        //TODO: 내 생각엔 여기선 다이얼로그 바깥 클릭해서 탈출 못하게 하면 안되나?\r\n        //사용자가 선택한 위치 표시\r\n        binding.createPartyLocation2Tv.setTextColor(ContextCompat.getColor(this,R.color.black))\r\n        binding.createPartyLocation2Tv.text = loc\r\n        drawMap(createPartyVM.getMapPoint()!!)\r\n        checking()\r\n    }\r\n\r\n    private fun drawMap(mapPoint: MapPoint){\r\n        //맵 다시 띄우기\r\n        mapView = MapView(this)\r\n        mapView.setOnTouchListener { v, event ->\r\n            binding.createPartySv.requestDisallowInterceptTouchEvent(true) //부모에게 Touch Event를 빼앗기지 않게 할 수 있다.\r\n            return@setOnTouchListener false\r\n        }\r\n        binding.createPartyKakaoMapLocation.addView(mapView)\r\n        //마커생성\r\n        val marker = MapPOIItem()\r\n        marker.itemName = \"요기?\"\r\n        marker.isShowCalloutBalloonOnTouch = false // 클릭시 말풍선을 보여줄지 여부 (false)\r\n        marker.mapPoint = mapPoint\r\n        mapView.addPOIItem(marker)\r\n        mapView!!.setMapCenterPoint(mapPoint, true)//지도 중심점 변경\r\n    }\r\n\r\n    override fun onDefaultLocSuccess(result: CreatePartyDefaultLocResult) {\r\n        Log.d(\"kakaodefault\", \"성공함\")\r\n        Log.d(\"kakaodefault\", result.latitude.toString()+\"/\"+result.longitude.toString())\r\n        //위도 경도로 MapPoint만들기\r\n        this.mapPoint = MapPoint.mapPointWithGeoCoord(result.latitude,result.longitude) // default로 맵포인트 설정됨\r\n        drawMap(mapPoint) // default 위치 정보 맵 위에 표시\r\n        getAddress(mapPoint) // default 위치 정보 tv에 표시\r\n    }\r\n\r\n    override fun onDefaultLocFailure() {\r\n        Log.d(\"kakaodefault\", \"defaultLoc 불러오기 실패함\")\r\n    }\r\n\r\n    //위도 경도로 주소 구하는 Reverse-GeoCoding\r\n    private fun getAddress(position: MapPoint) {\r\n        val geoCoder = Geocoder(this, Locale.KOREA)\r\n        var addr = \"주소 오류\"\r\n\r\n        try {\r\n            addr = geoCoder.getFromLocation(position.mapPointGeoCoord.latitude, position.mapPointGeoCoord.longitude, 1).first().getAddressLine(0)\r\n            binding.createPartyLocation2Tv.text = addr\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    // 파티 등록하기 성공/실패\r\n    override fun onCreatePartySuccess() {\r\n        Log.d(\"jjang\", \"파티 생성 성공(서버로 정보 보냄)\")\r\n    }\r\n\r\n    override fun onCreatePartyFailure(message: String) {\r\n        Log.d(\"jjang\",message)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/CreatePartyActivity.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/CreatePartyActivity.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/CreatePartyActivity.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/CreatePartyActivity.kt	(date 1659937807451)
@@ -10,11 +10,11 @@
 import android.view.View
 import androidx.core.content.ContextCompat
 import androidx.lifecycle.ViewModelProvider
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.*
 import com.example.geeksasaeng.Home.Party.CreateParty.DialogCategory
 import com.example.geeksasaeng.Home.Party.CreateParty.DialogDt
 import com.example.geeksasaeng.Home.Party.CreateParty.DialogLocation
 import com.example.geeksasaeng.Home.Party.CreateParty.DialogNum
+import com.example.geeksasaeng.Home.Party.Retrofit.*
 import com.example.geeksasaeng.MainActivity
 import com.example.geeksasaeng.R
 import com.example.geeksasaeng.Utils.BaseActivity
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyResponse.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyResponse.kt
rename from app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyResponse.kt
rename to app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyResponse.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/CreateParty/Retrofit/CreatePartyResponse.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/Retrofit/CreatePartyResponse.kt	(date 1659937177494)
@@ -1,4 +1,4 @@
-package com.example.geeksasaeng.Home.CreateParty.Retrofit
+package com.example.geeksasaeng.Home.Party.Retrofit
 
 import com.example.geeksasaeng.Signup.Retrofit.SignUpResult
 import com.google.gson.annotations.SerializedName
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    xmlns:tools=\"http://schemas.android.com/tools\"\r\n    package=\"com.example.geeksasaeng\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <application\r\n        android:name=\".Utils.ApplicationClass\"\r\n        android:allowBackup=\"false\"\r\n        android:icon=\"@mipmap/ic_app_logo\"\r\n        android:roundIcon=\"@mipmap/ic_app_logo_round\"\r\n        android:label=\"@string/app_name\"\r\n        android:networkSecurityConfig=\"@xml/network_security_config\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.Geeksasaeng\"\r\n        android:usesCleartextTraffic=\"true\">\r\n\r\n        <activity\r\n            android:name=\".Signup.Basic.SignUpActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Signup.Tos1Activity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Signup.Tos2Activity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Home.CreateParty.CreatePartyActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:exported=\"false\" />\r\n        <activity\r\n            android:name=\".Login.DormitoryActivity\"\r\n            android:exported=\"false\" />\r\n        <activity android:name=\".Login.LoginActivity\" />\r\n        <activity\r\n            android:name=\".SplashActivity\"\r\n            android:exported=\"true\" >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity android:name=\".Signup.Naver.SignUpNaverActivity\" />\r\n        <activity android:name=\".Home.Party.ReportParty.PartyReportOptionActivity\"\r\n            android:windowSoftInputMode=\"adjustResize\" />\r\n        <activity android:name=\".Home.Party.ReportParty.PartyReportNoOptionActivity\"\r\n            android:windowSoftInputMode=\"adjustResize\" />\r\n        <activity android:name=\".Home.Search.SearchActivity\" />\r\n        <activity android:name=\".Chatting.ChattingRoom.ChattingRoomActivity\" />\r\n\r\n        <!--카카오맵 APP KEY 추가-->\r\n        <meta-data\r\n            android:name=\"com.kakao.sdk.AppKey\"\r\n            android:value=\"${kakaoNativeAppKey}\" />\r\n\r\n        <service android:name=\".FirebaseMessagingService\"\r\n            android:exported=\"false\">\r\n            <intent-filter>\r\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\"/>\r\n            </intent-filter>\r\n        </service>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/AndroidManifest.xml	(date 1659938211893)
@@ -19,6 +19,14 @@
         android:theme="@style/Theme.Geeksasaeng"
         android:usesCleartextTraffic="true">
 
+        <activity
+            android:name=".SplashActivity"
+            android:exported="true" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
         <activity
             android:name=".Signup.Basic.SignUpActivity"
             android:exported="false" />
@@ -38,15 +46,6 @@
             android:name=".Login.DormitoryActivity"
             android:exported="false" />
         <activity android:name=".Login.LoginActivity" />
-        <activity
-            android:name=".SplashActivity"
-            android:exported="true" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
         <activity android:name=".Signup.Naver.SignUpNaverActivity" />
         <activity android:name=".Home.Party.ReportParty.PartyReportOptionActivity"
             android:windowSoftInputMode="adjustResize" />
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyResponse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.UpdateParty.Retrofit\r\n\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult\r\nimport com.google.gson.annotations.SerializedName\r\n\r\n//배달 파티 수정\r\ndata class UpdatePartyResponse(\r\n    @SerializedName(\"code\") val code: Int,\r\n    @SerializedName(\"isSuccess\") val isSuccess : Boolean,\r\n    @SerializedName(\"message\") val message: String,\r\n    @SerializedName(\"result\") val result: CreatePartyDefaultLocResult?\r\n)\r\n\r\ndata class UpdatePartyResult(\r\n    @SerializedName(\"chief\") val chief: String,\r\n    @SerializedName(\"content\") val content: String,\r\n    @SerializedName(\"currentMatching\") val currentMatching: Int,\r\n    @SerializedName(\"dormitory\") val dormitory: String,\r\n    @SerializedName(\"foodCategory\") val foodCategory: String,\r\n    @SerializedName(\"hashTag\") val hashTag: Boolean,\r\n    @SerializedName(\"latitude\") val latitude: Double,\r\n    @SerializedName(\"longitude\") val longitude: Double,\r\n    @SerializedName(\"matchingStatus\") val matchingStatus: String,\r\n    @SerializedName(\"maxMatching\") val maxMatching: Int,\r\n    @SerializedName(\"orderTime\") val orderTime: String,\r\n    @SerializedName(\"orderTimeCategoryType\") val orderTimeCategoryType: String,\r\n    @SerializedName(\"storeUrl\") val storeUrl: String,\r\n    @SerializedName(\"title\") val title: String,\r\n    @SerializedName(\"updatedAt\") val updatedAt: String\r\n)\r\n\r\ndata class UpdatePartyRequest(\r\n    @SerializedName(\"content\") val content: String,\r\n    @SerializedName(\"foodCategory\") val foodCategory: Int?,\r\n    @SerializedName(\"hashTag\") val hashTag: Boolean?,\r\n    @SerializedName(\"latitude\") val latitude: Double,\r\n    @SerializedName(\"longitude\") val longitude: Double,\r\n    @SerializedName(\"maxMatching\") val maxMatching: Int,\r\n    @SerializedName(\"orderTime\") val orderTime: String?,\r\n    @SerializedName(\"storeUrl\") val storeUrl: String?,\r\n    @SerializedName(\"title\") val title: String?\r\n)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyResponse.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyResponse.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyResponse.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyResponse.kt	(date 1659938005327)
@@ -1,6 +1,6 @@
 package com.example.geeksasaeng.Home.Party.UpdateParty.Retrofit
 
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyDefaultLocResult
+import com.example.geeksasaeng.Home.Party.Retrofit.CreatePartyDefaultLocResult
 import com.google.gson.annotations.SerializedName
 
 //배달 파티 수정
Index: app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Party.UpdateParty.Retrofit\r\n\r\nimport android.util.Log\r\nimport com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyResponse\r\nimport com.example.geeksasaeng.Utils.ApplicationClass.Companion.retrofit\r\nimport com.example.geeksasaeng.Utils.getJwt\r\nimport retrofit2.Call\r\nimport retrofit2.Callback\r\nimport retrofit2.Response\r\n\r\n\r\nclass UpdatePartyService {\r\n    //뷰객체 생성\r\n    private lateinit var updatePartyView: UpdatePartyView\r\n\r\n    private val updatePartyService = retrofit.create(UpdatePartyRetrofitInterfaces::class.java)\r\n\r\n    //setView\r\n    fun setUpdatePartyView(updatePartyView: UpdatePartyView){\r\n        this.updatePartyView = updatePartyView\r\n    }\r\n\r\n    fun updatePartySender(dormitoryId: Int, partyId:Int, updatePartyRequest: UpdatePartyRequest){\r\n        updatePartyService.updateParty(\"Bearer \" + getJwt(), dormitoryId, updatePartyRequest, partyId).enqueue(object:\r\n            Callback<UpdatePartyResponse>{\r\n            override fun onResponse(\r\n                call: Call<UpdatePartyResponse>,\r\n                response: Response<UpdatePartyResponse>\r\n            ) {\r\n                Log.d(\"cherry-response\",response.toString())\r\n                if (response.isSuccessful && response.code() == 200) {\r\n                    val resp: UpdatePartyResponse = response.body()!!\r\n                    Log.d(\"cherry-resp\",resp.toString())\r\n                    when (resp.code) {\r\n                        1000 -> updatePartyView.onUpdatePartySuccess()\r\n                        else -> updatePartyView.onUpdatePartyFailure(resp.message)\r\n                    }\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<UpdatePartyResponse>, t: Throwable) {\r\n                Log.d(\"cherry\",\"실패패\")\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyService.kt b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyService.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyService.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Party/UpdateParty/Retrofit/UpdatePartyService.kt	(date 1659938049094)
@@ -1,7 +1,6 @@
 package com.example.geeksasaeng.Home.Party.UpdateParty.Retrofit
 
 import android.util.Log
-import com.example.geeksasaeng.Home.CreateParty.Retrofit.CreatePartyResponse
 import com.example.geeksasaeng.Utils.ApplicationClass.Companion.retrofit
 import com.example.geeksasaeng.Utils.getJwt
 import retrofit2.Call
Index: app/src/main/java/com/example/geeksasaeng/SplashActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng\r\n\r\nimport android.media.MediaPlayer\r\nimport android.net.Uri\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.widget.VideoView\r\nimport com.airbnb.lottie.RenderMode\r\nimport com.example.geeksasaeng.Login.LoginActivity\r\nimport com.example.geeksasaeng.Login.Retrofit.*\r\nimport com.example.geeksasaeng.Utils.*\r\nimport com.example.geeksasaeng.databinding.ActivitySplashBinding\r\nimport java.lang.Exception\r\n\r\nclass SplashActivity : BaseActivity<ActivitySplashBinding>(ActivitySplashBinding::inflate),\r\n     AutoLoginView {\r\n    private lateinit var loginService: LoginDataService\r\n    var jwt: String? = null\r\n    var loginId: String? = null\r\n    var password: String? = null\r\n\r\n    override fun initAfterBinding() {\r\n//      Splash Animation 적용\r\n        val animationView = binding.animationView\r\n        animationView.setRenderMode(RenderMode.AUTOMATIC)\r\n        animationView.enableMergePathsForKitKatAndAbove(true)\r\n        animationView.imageAssetsFolder = \"images\"\r\n        animationView.setAnimation(\"data.json\");\r\n        animationView.playAnimation()\r\n        getLoginService()\r\n        // 화면 전환\r\n        jump()\r\n    }\r\n\r\n    private fun jump() {\r\n        jwt = getJwt()\r\n        loginId = getLoginId()\r\n        password = getPassword()\r\n        Log.d(\"Splash-Response\", getJwt() + \" \" + getLoginId() + \" \" + getPassword())\r\n        if (jwt != null && isAutoLogin() == true) { // 자동 로그인 체크 한 경우\r\n            loginService.autoLogin()\r\n        } else {\r\n            removeAutoLogin()\r\n            changeActivity(LoginActivity::class.java)\r\n            finish()\r\n        }\r\n    }\r\n\r\n    private fun getLoginService(){\r\n        loginService = LoginDataService()\r\n        loginService.setAutoLoginView(this)\r\n    }\r\n\r\n    private fun changeMainActivity() {\r\n        changeActivity(MainActivity::class.java)\r\n        finish()\r\n    }\r\n\r\n    override fun onAutoLoginSuccess(code: Int, result: AutoLoginResult) {\r\n        changeMainActivity()\r\n    }\r\n\r\n    override fun onAutoLoginFailure(message: String) {\r\n        removeAutoLogin()\r\n        changeActivity(LoginActivity::class.java)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/SplashActivity.kt b/app/src/main/java/com/example/geeksasaeng/SplashActivity.kt
--- a/app/src/main/java/com/example/geeksasaeng/SplashActivity.kt	(revision 458106eb6368f2cdb16ea4f5b58cf16a4d682c90)
+++ b/app/src/main/java/com/example/geeksasaeng/SplashActivity.kt	(date 1659937478512)
@@ -13,8 +13,7 @@
 import com.example.geeksasaeng.databinding.ActivitySplashBinding
 import java.lang.Exception
 
-class SplashActivity : BaseActivity<ActivitySplashBinding>(ActivitySplashBinding::inflate),
-     AutoLoginView {
+class SplashActivity : BaseActivity<ActivitySplashBinding>(ActivitySplashBinding::inflate), AutoLoginView {
     private lateinit var loginService: LoginDataService
     var jwt: String? = null
     var loginId: String? = null
