Index: app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Delivery\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.isEmpty\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.bumptech.glide.Glide\r\nimport com.example.geeksasaeng.Home.CreateParty.CreatePartyActivity\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.BannerVPAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.DeliveryRVAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.PeopleSpinnerAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryBannerView\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryFilterView\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryService\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryView\r\nimport com.example.geeksasaeng.Home.Party.LookPartyFragment\r\nimport com.example.geeksasaeng.MainActivity\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.Signup.Naver.StepNaverOneFragment\r\nimport com.example.geeksasaeng.Utils.BaseFragment\r\nimport com.example.geeksasaeng.databinding.FragmentDeliveryBinding\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\n\r\nclass DeliveryFragment: BaseFragment<FragmentDeliveryBinding>(FragmentDeliveryBinding::inflate), DeliveryView, DeliveryBannerView, DeliveryFilterView {\r\n    private var deliveryArray = ArrayList<DeliveryPartiesVoList?>()\r\n    private lateinit var deliveryAdapter: DeliveryRVAdapter\r\n    private lateinit var deliveryService: DeliveryService //서비스 객체\r\n    private lateinit var deliveryBannerAdapter : BannerVPAdapter\r\n    private var flag: Int = 1\r\n    private var currentPosition = Int.MAX_VALUE / 2\r\n    private val thread = Thread(PagerRunnable())\r\n    var isLoading = false\r\n    var dormitoryId: Int = 1\r\n    var totalCursor: Int = 0\r\n    var orderTimeCategory: String? = null\r\n    var maxMatching: Int? = null\r\n    var nowTime: Long = 0\r\n    var date: Date? = null\r\n    var dateFormat: SimpleDateFormat = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\")\r\n    var finalPage: Boolean? = false\r\n    var filterCheckFlag: Boolean = false\r\n\r\n    //핸들러 설정\r\n    val handler= Handler(Looper.getMainLooper()){\r\n        setPage()\r\n        true\r\n    }\r\n\r\n    override fun initAfterBinding() {\r\n        // 모든 fragment stack 제거\r\n        clearBackStack()\r\n\r\n        deliveryService = DeliveryService() //서비스 객체 생성\r\n        deliveryService.setDeliveryView(this)\r\n        deliveryService.setDeliveryBannerView(this)\r\n        binding.deliveryProgressCover.visibility = View.GONE\r\n        binding.deliveryBottomView.visibility = View.VISIBLE\r\n\r\n        initBanner() //배너작업\r\n        initSpinner() //필터(spinner) 작업\r\n        initRadioBtn() //필터(radiobutton) 작업\r\n        initTopScrollListener() // 상단 스크롤 작업\r\n        initAdapter()\r\n\r\n        binding.deliveryFloatingBtn.setOnClickListener {\r\n            val intent = Intent(context, CreatePartyActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        if (totalCursor == 0)\r\n            initLoadPosts()\r\n\r\n        initScrollListener()\r\n    }\r\n\r\n    // 오늘 날짜 계산\r\n    private fun calculateToday(): String {\r\n        nowTime = System.currentTimeMillis();\r\n        date = Date(nowTime)\r\n        return dateFormat.format(date)\r\n    }\r\n\r\n    // 남은 시간 계산\r\n    // TODO: 흠... 실시간으로 해야하는데 흠...\r\n    private fun calculateTime(orderTime: String): String {\r\n        var orderYear = Integer.parseInt(orderTime.substring(0, 4))\r\n        var orderMonth = Integer.parseInt(orderTime.substring(5, 7))\r\n        var orderDay = Integer.parseInt(orderTime.substring(8, 10))\r\n        var orderHours = Integer.parseInt(orderTime.substring(11, 13))\r\n        var orderMinutes = Integer.parseInt(orderTime.substring(14, 16))\r\n        var orderSec = 0\r\n\r\n        var currentTime = calculateToday()\r\n        var todayYear = Integer.parseInt(currentTime.substring(0, 4))\r\n        var todayMonth = Integer.parseInt(currentTime.substring(5, 7))\r\n        var todayDay = Integer.parseInt(currentTime.substring(8, 10))\r\n        var todayHours = Integer.parseInt(currentTime.substring(11, 13))\r\n        var todayMinutes = Integer.parseInt(currentTime.substring(14, 16))\r\n        var todaySec = Integer.parseInt(currentTime.substring(17, 19))\r\n\r\n        var today = Calendar.getInstance().apply {\r\n            set(Calendar.YEAR, todayYear)\r\n            set(Calendar.MONTH, todayMonth)\r\n            set(Calendar.DAY_OF_MONTH, todayDay)\r\n        }.timeInMillis + (60000 * 60 * todayHours) + (60000 * todayMinutes)+ (1000* todaySec)\r\n\r\n        var order = Calendar.getInstance().apply {\r\n            set(Calendar.YEAR, orderYear)\r\n            set(Calendar.MONTH, orderMonth)\r\n            set(Calendar.DAY_OF_MONTH, orderDay)\r\n        }.timeInMillis + (60000 * 60 * orderHours) + (60000 * orderMinutes)\r\n\r\n        var remainTime = order - today\r\n\r\n        if (remainTime <= 0) {\r\n            return \"끝끝\"\r\n        }\r\n\r\n        var day = remainTime / (24*60*60*1000)\r\n        var sec = (remainTime % (24*60*60*1000)) / 1000\r\n        var hour = sec / 3600\r\n        var minute = (sec % 3600) / 60\r\n\r\n        return if (day > 0)\r\n            \"${day}일 ${hour}시간 ${minute}분 남았어요\"\r\n        else if (hour > 0)\r\n            \"${hour}시간 ${minute}분 남았어요\"\r\n        else\r\n            \"${minute}분 남았어요\"\r\n    }\r\n\r\n    // 리사이클러뷰에 최초로 넣어줄 데이터를 로드하는 경우\r\n    private fun initLoadPosts() {\r\n        totalCursor = 0\r\n        isLoading = false\r\n        finalPage = false\r\n        if (filterCheckFlag) getDeliveryFilterList(dormitoryId, totalCursor, orderTimeCategory, maxMatching)\r\n        else getDeliveryAllList(dormitoryId, totalCursor)\r\n    }\r\n\r\n    // 리사이클러뷰에 더 보여줄 데이터를 로드하는 경우\r\n    // TODO: 로딩 중에 스크롤 막기\r\n    // TODO: 새로고침 했을 때 제일 밑으로 가게 만들기\r\n    private fun initMoreLoadPosts() {\r\n        binding.deliveryProgressCover.visibility = View.VISIBLE\r\n        val handler = Handler()\r\n        handler.postDelayed({\r\n            if (filterCheckFlag) getDeliveryFilterList(dormitoryId, totalCursor, orderTimeCategory, maxMatching)\r\n            else getDeliveryAllList(dormitoryId, totalCursor)\r\n            isLoading = false\r\n            binding.deliveryProgressCover.visibility = View.GONE\r\n        }, 1200)\r\n    }\r\n\r\n    // 상단 스크롤 관련\r\n    private fun initTopScrollListener() {\r\n        binding.deliverySwipe.setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener { /* swipe 시 진행할 동작 */\r\n            deliveryArray.clear()\r\n            initLoadPosts()\r\n            initAdapter()\r\n            binding.deliverySwipe.isRefreshing = false\r\n        })\r\n    }\r\n\r\n    // 하단 스크롤 관련\r\n    // TODO: 하단 스크롤 디자인 관련 수정 필요해보임! (지금은 오류 해결하려고 일단 디자인 이렇게 했어!)\r\n    private fun initScrollListener() {\r\n        binding.deliveryRv.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                super.onScrolled(recyclerView, dx, dy)\r\n\r\n                val layoutManager = binding.deliveryRv.layoutManager\r\n\r\n                if (finalPage == true) {\r\n                    if ((layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() >= deliveryArray.size - 2)\r\n                        binding.deliveryBottomView.visibility = View.INVISIBLE\r\n                    else binding.deliveryBottomView.visibility = View.VISIBLE\r\n                }\r\n\r\n                if (!isLoading) {\r\n                    if (layoutManager != null && (layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() == deliveryArray.size - 1) {\r\n                        if (finalPage == false)\r\n                            initMoreLoadPosts()\r\n                        else binding.deliveryBottomView.visibility = View.INVISIBLE\r\n\r\n                        isLoading = true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    // 배달 목록 가져오기\r\n    private fun getDeliveryAllList(dormitoryId: Int, cursor: Int) {\r\n        val deliveryDataService = DeliveryService()\r\n        deliveryDataService.setDeliveryView(this)\r\n        deliveryDataService.getDeliveryAllList(dormitoryId, cursor)\r\n        totalCursor += 1\r\n    }\r\n\r\n    // Adapter 설정\r\n    private fun initAdapter() {\r\n        deliveryAdapter = DeliveryRVAdapter(deliveryArray)\r\n        binding.deliveryRv.adapter = deliveryAdapter\r\n        binding.deliveryRv.layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)\r\n\r\n        deliveryAdapter.setOnItemClickListener(object : DeliveryRVAdapter.OnItemClickListener{\r\n            override fun onItemClick(data: DeliveryPartiesVoList, pos : Int) {\r\n                var deliveryItemId = deliveryAdapter.getDeliveryItemId(pos).toString()\r\n\r\n                val transaction: FragmentTransaction = (context as MainActivity).supportFragmentManager.beginTransaction()\r\n\r\n                val bundle = Bundle()\r\n                bundle.putString(\"deliveryItemId\", deliveryItemId)\r\n\r\n                val lookPartyFragment = LookPartyFragment()\r\n                lookPartyFragment.arguments = bundle\r\n\r\n                transaction.addToBackStack(\"lookParty\").replace(R.id.main_frm, lookPartyFragment)\r\n                transaction.commit()\r\n            }\r\n        })\r\n    }\r\n\r\n    override fun deliverySuccess(result: DeliveryResult) {\r\n        Log.d(\"DELIVERY-REPSONSE\", \"SUCCESS\")\r\n\r\n        finalPage = result.finalPage\r\n        val result = result.deliveryPartiesVoList\r\n\r\n        for (i in 0 until result!!.size) {\r\n            var currentMatching = result?.get(i)?.currentMatching\r\n            var foodCategory = result?.get(i)?.foodCategory\r\n            var id = result?.get(i)?.id\r\n            var maxMatching = result?.get(i)?.maxMatching\r\n            var orderTime = result?.get(i)?.orderTime\r\n            var title = result?.get(i)?.title\r\n            var hashTags = result?.get(i)?.hasHashTag\r\n\r\n            deliveryArray.add(\r\n                DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, calculateTime(orderTime!!), title, hashTags)\r\n            )\r\n\r\n            deliveryAdapter.notifyDataSetChanged()\r\n        }\r\n    }\r\n\r\n    override fun deliveryFailure(code: Int, message: String) {\r\n        Log.d(\"DELIVERY-RESPONSE\", \"DELIVERY-FRAGMENT-FAILURE\")\r\n        totalCursor--\r\n    }\r\n\r\n    private fun initRadioBtn(){\r\n        binding.deliveryTimeRg.setOnCheckedChangeListener { _:RadioGroup, checkedId:Int ->\r\n            binding.deliveryTimeRg.check(checkedId)\r\n            filterCheckFlag = true\r\n\r\n            when(checkedId){\r\n                R.id.delivery_rb1 -> orderTimeCategory = \"BREAKFAST\"\r\n                R.id.delivery_rb2 -> orderTimeCategory = \"LUNCH\"\r\n                R.id.delivery_rb3 -> orderTimeCategory = \"DINNER\"\r\n                R.id.delivery_rb4 -> orderTimeCategory = \"MIDNIGHT_SNACKS\"\r\n                else -> filterCheckFlag = false\r\n            }\r\n        }\r\n    }\r\n\r\n    //배너 작업\r\n    private fun initBanner(){\r\n        deliveryService.getDeliveryBanner() //광고 불러오기\r\n    }\r\n\r\n    //페이지 변경하기\r\n    fun setPage(){\r\n        if(currentPosition == deliveryBannerAdapter.itemCount) //currentPosition이 마지막 페이지 다음페이지면\r\n            currentPosition = 0\r\n        binding.deliveryBannerVp.setCurrentItem(currentPosition, true)\r\n        currentPosition+=1\r\n    }\r\n\r\n    //스피너 관련 작업\r\n    private fun initSpinner(){\r\n        val items = resources.getStringArray(R.array.home_dropdown1) // spinner아이템 배열\r\n        //어댑터\r\n        val spinnerAdapter = PeopleSpinnerAdapter(requireContext(), items)\r\n        binding.deliveryPeopleSpinner.adapter = spinnerAdapter\r\n        binding.deliveryPeopleSpinner.setSelection(items.size-1) //마지막아이템을 스피너 초기값으로 설정해준다.\r\n\r\n        //이벤트 처리\r\n        binding.deliveryPeopleSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                //TODO:스피너\r\n                //축소된 스피너화면에 맞게 아이템 색상, 화살표 변경\r\n                val image: ImageView = view!!.findViewById(R.id.arrow_iv)\r\n                image.setImageResource(R.drawable.ic_spinner_up)\r\n                image.visibility = View.VISIBLE\r\n                items[0] = items[position] // items[0]은 현재 선택된 아이템 저장용\r\n                val textName: TextView = view!!.findViewById(R.id.spinner_text)\r\n                textName.text = items[position]\r\n                textName.setTextColor(ContextCompat.getColor(requireContext(),R.color.gray_2))\r\n\r\n                if (position in 1..5)\r\n                    filterCheckFlag = true\r\n\r\n                maxMatching = position * 2\r\n                finalPage = false\r\n            }\r\n            override fun onNothingSelected(parent: AdapterView<*>?) { }\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        flag = 1 // 다른 페이지 갔다가 돌아오면 다시 스크롤 시작\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        flag = 0 // 다른 페이지로 떠나있는 동안 스크롤 동작 필요없음. 멈추기\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        thread.interrupt() //쓰레드 중지\r\n    }\r\n\r\n    fun clearBackStack() {\r\n        val fragmentManager: FragmentManager = (context as MainActivity).supportFragmentManager\r\n        fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n    }\r\n\r\n    override fun ondeliveryBannerSuccess(results: Array<DeliveryBannerResult>) {\r\n        deliveryBannerAdapter = BannerVPAdapter(this)\r\n        //더미 img url\r\n/*        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg\"))\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg\"))\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg\"))\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg\"))\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg\"))\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg\"))*/\r\n        for (i in results){\r\n            Log.d(\"commercial\", i.toString() + \"= i값\")\r\n            deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))\r\n            deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))\r\n            deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))\r\n            deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))\r\n            deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))\r\n        }\r\n        deliveryBannerAdapter.addFragment(BannerFragment(\"https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg\"))\r\n\r\n        binding.deliveryBannerVp.adapter= deliveryBannerAdapter\r\n        binding.deliveryBannerVp.orientation= ViewPager2.ORIENTATION_HORIZONTAL\r\n        binding.deliveryBannerVp.setCurrentItem(currentPosition, false) // 시작위치 지정\r\n\r\n        //뷰페이저 넘기는 쓰레드\r\n        if (thread.state == Thread.State.NEW)\r\n            thread.start() //스레드 시작\r\n\r\n        binding.deliveryBannerVp.apply {\r\n            registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {\r\n                override fun onPageScrollStateChanged(state: Int) {\r\n                    super.onPageScrollStateChanged(state)\r\n                    when(state){\r\n                        //뷰페이저가 멈춰져있을때\r\n                        //SCROLL_STATE_IDLE 상태는 현재 스크롤을 하지 않는 상태\r\n                        ViewPager2.SCROLL_STATE_IDLE ->{\r\n                            flag=1\r\n                            currentPosition = binding.deliveryBannerVp.currentItem+1\r\n                        }\r\n                        //뷰페이저 움직이는 중\r\n                        ViewPager2.SCROLL_STATE_DRAGGING -> flag=0\r\n                    }\r\n                }\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    //3초마다 페이지 넘기는 기능\r\n    inner class PagerRunnable:Runnable{\r\n        override fun run() {\r\n            while(true){\r\n                try {\r\n                    Thread.sleep(3000)\r\n                    if(this@DeliveryFragment.flag==1) {\r\n                        handler.sendEmptyMessage(0)\r\n                    }\r\n                } catch (e : InterruptedException){\r\n                    Log.d(\"interupt\", \"interupt발생\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun ondeliveryBannerFailure(message: String) {\r\n        Log.d(\"commercial\", \"광고 불러오기 실패~!\")\r\n    }\r\n\r\n    // 배달 목록 필터 적용 후 가져오기\r\n    private fun getDeliveryFilterList(dormitoryId: Int, cursor: Int, orderTimeCategory: String?, maxMatching: Int?) {\r\n        val deliveryDataService = DeliveryService()\r\n        deliveryDataService.setDeliveryFilterView(this)\r\n        deliveryDataService.getDeliveryFilterList(dormitoryId, cursor, orderTimeCategory, maxMatching)\r\n        totalCursor += 1\r\n    }\r\n\r\n    override fun deliveryFilterSuccess(result: DeliveryResult) {\r\n        Log.d(\"DELIVERY-FILTER\", \"SUCCESS\")\r\n\r\n        finalPage = result.finalPage\r\n\r\n        val result = result.deliveryPartiesVoList\r\n\r\n        for (i in 0 until result!!.size) {\r\n            var currentMatching = result?.get(i)?.currentMatching\r\n            var foodCategory = result?.get(i)?.foodCategory\r\n            var id = result?.get(i)?.id\r\n            var maxMatching = result?.get(i)?.maxMatching\r\n            var orderTime = result?.get(i)?.orderTime\r\n            var title = result?.get(i)?.title\r\n            var hashTags = result?.get(i)?.hasHashTag\r\n\r\n            deliveryArray.add(\r\n                DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, calculateTime(orderTime!!), title, hashTags)\r\n            )\r\n\r\n            deliveryAdapter.notifyItemChanged(deliveryArray.size - 1)\r\n        }\r\n\r\n        if (finalPage == true) {\r\n            Log.d(\"DELIVERY-FILTER\", \"getDeliveryFilterList-DeliveryArray-Size = ${deliveryArray.size}\")\r\n            if (deliveryArray.size >= 2) {\r\n                if ((binding.deliveryRv.layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() >= deliveryArray.size - 2)\r\n                    binding.deliveryBottomView.visibility = View.INVISIBLE\r\n                else binding.deliveryBottomView.visibility = View.VISIBLE\r\n            } else binding.deliveryBottomView.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    override fun deliveryFilterFailure(code: Int, message: String) {\r\n        Log.d(\"DELIVERY-RESPONSE\", \"DELIVERY-FILTER-FRAGMENT-FAILURE\")\r\n        totalCursor--\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt	(revision a45a53820f0f73961358e451e6a2a7b66b5b5155)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt	(date 1659102881811)
@@ -344,12 +344,6 @@
     override fun ondeliveryBannerSuccess(results: Array<DeliveryBannerResult>) {
         deliveryBannerAdapter = BannerVPAdapter(this)
         //더미 img url
-/*        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg"))
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg"))
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg"))
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg"))
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8809453266351.jpg"))
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg"))*/
         for (i in results){
             Log.d("commercial", i.toString() + "= i값")
             deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))
@@ -358,7 +352,6 @@
             deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))
             deliveryBannerAdapter.addFragment(BannerFragment(i.imgUrl))
         }
-        deliveryBannerAdapter.addFragment(BannerFragment("https://tqklhszfkvzk6518638.cdn.ntruss.com/product/8801771024750.jpg"))
 
         binding.deliveryBannerVp.adapter= deliveryBannerAdapter
         binding.deliveryBannerVp.orientation= ViewPager2.ORIENTATION_HORIZONTAL
@@ -385,7 +378,6 @@
                 }
             })
         }
-
     }
 
     //3초마다 페이지 넘기는 기능
@@ -398,7 +390,7 @@
                         handler.sendEmptyMessage(0)
                     }
                 } catch (e : InterruptedException){
-                    Log.d("interupt", "interupt발생")
+                    Log.d("interrupt", "interrupt 발생")
                 }
             }
         }
Index: app/src/main/java/com/example/geeksasaeng/Home/Delivery/Adapter/DeliveryRVAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Delivery.Adapter\r\n\r\nimport android.graphics.Color\r\nimport android.util.Log\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.geeksasaeng.Home.Delivery.DeliveryPartiesVoList\r\nimport com.example.geeksasaeng.Home.Delivery.DeliveryResult\r\nimport com.example.geeksasaeng.R\r\n\r\nclass DeliveryRVAdapter(private var deliveryList: ArrayList<DeliveryPartiesVoList?>) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {\r\n\r\n    private lateinit var mItemClickListener : OnItemClickListener\r\n\r\n    // 클릭 리스너 구현 위한 인터페이스\r\n    interface OnItemClickListener{\r\n        fun onItemClick(data: DeliveryPartiesVoList, pos : Int)\r\n    }\r\n\r\n    fun setOnItemClickListener(listener : OnItemClickListener) {\r\n        mItemClickListener = listener\r\n    }\r\n\r\n    private val VIEW_TYPE_ITEM = 0\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_delivery, parent, false)\r\n        return ItemViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(viewHolder: RecyclerView.ViewHolder, position: Int) {\r\n        populateItemRows(viewHolder as ItemViewHolder, position)\r\n\r\n        viewHolder.itemView.setOnClickListener {\r\n            // val intent = Intent(holder.itemView?.context, PostSelectImgActivity::class.java)\r\n            // intent.putExtra(\"position\", position)\r\n            mItemClickListener.onItemClick(deliveryList[position]!!, position)\r\n            Log.d(\"ItemClickCheck\", \"position = $position\")\r\n\r\n            // imgList[position].img!!\r\n            // ContextCompat.startActivity(holder.itemView.context, intent, null)\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return if (deliveryList == null) 0 else deliveryList!!.size\r\n    }\r\n\r\n    override fun getItemViewType(position: Int): Int {\r\n        return VIEW_TYPE_ITEM\r\n    }\r\n\r\n    private inner class ItemViewHolder(itemView: View) :\r\n        RecyclerView.ViewHolder(itemView)\r\n    {\r\n        // 메인 파티 리스트 부분\r\n        // Not Use = chief, content, currentMatching, foodCategory, id, location\r\n        // Use = currentMatching, maxMatching, orderTime, title\r\n\r\n        var deliveryItemMemberIc : ImageView\r\n        var deliveryItemMemberNumber :TextView\r\n        var deliveryItemTime : TextView\r\n        var deliveryItemTitle : TextView\r\n        var deliveryItemCategory : TextView\r\n        var deliveryItemHashTag : TextView\r\n\r\n        init {\r\n            deliveryItemMemberIc = itemView.findViewById(R.id.delivery_item_member_ic)\r\n            deliveryItemMemberNumber = itemView.findViewById(R.id.delivery_item_member_number)\r\n            deliveryItemTime = itemView.findViewById(R.id.delivery_item_time)\r\n            deliveryItemTitle = itemView.findViewById(R.id.delivery_item_title)\r\n            deliveryItemCategory = itemView.findViewById(R.id.delivery_item_category)\r\n            deliveryItemHashTag = itemView.findViewById(R.id.delivery_item_hashTag)\r\n        }\r\n    }\r\n\r\n    private fun populateItemRows(viewHolder: ItemViewHolder, position: Int) {\r\n        // 메인 파티 리스트 부분\r\n        // Use = currentMatching, maxMatching, orderTime, title\r\n\r\n        val item = deliveryList!![position]\r\n\r\n        // (최대 멤버 - 현재 매칭 멤버 = 1)인 상황에는 파란색 아이콘, 아닐 경우 회색 아이콘을 구분하기 위한 부분\r\n        if (item!!.maxMatching!! - item!!.currentMatching!! == 1) {\r\n            viewHolder.deliveryItemMemberIc.setImageResource(R.drawable.ic_member_blue)\r\n        } else {\r\n            viewHolder.deliveryItemMemberIc.setImageResource(R.drawable.ic_member_gray)\r\n        }\r\n\r\n        viewHolder.deliveryItemMemberNumber.setText(item!!.currentMatching.toString() + \"/\" + item!!.maxMatching)\r\n        viewHolder.deliveryItemTime.setText(item!!.orderTime)\r\n        viewHolder.deliveryItemTitle.setText(item!!.title)\r\n        viewHolder.deliveryItemCategory.setText(item!!.foodCategory)\r\n\r\n        if (item!!.hasHashTag!!) {\r\n            viewHolder.deliveryItemHashTag.setTextColor(Color.parseColor(\"#636363\"))\r\n        } else if (!item!!.hasHashTag!!) {\r\n            viewHolder.deliveryItemHashTag.setTextColor(Color.parseColor(\"#EFEFEF\"))\r\n        }\r\n    }\r\n\r\n    fun getDeliveryItemId(position: Int): Int? {\r\n        return deliveryList[position]?.id\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/Adapter/DeliveryRVAdapter.kt b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/Adapter/DeliveryRVAdapter.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/Adapter/DeliveryRVAdapter.kt	(revision a45a53820f0f73961358e451e6a2a7b66b5b5155)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/Adapter/DeliveryRVAdapter.kt	(date 1659104078858)
@@ -56,9 +56,7 @@
         return VIEW_TYPE_ITEM
     }
 
-    private inner class ItemViewHolder(itemView: View) :
-        RecyclerView.ViewHolder(itemView)
-    {
+    private inner class ItemViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
         // 메인 파티 리스트 부분
         // Not Use = chief, content, currentMatching, foodCategory, id, location
         // Use = currentMatching, maxMatching, orderTime, title
@@ -77,6 +75,8 @@
             deliveryItemTitle = itemView.findViewById(R.id.delivery_item_title)
             deliveryItemCategory = itemView.findViewById(R.id.delivery_item_category)
             deliveryItemHashTag = itemView.findViewById(R.id.delivery_item_hashTag)
+
+            Log.d("DELIVERY-ADAPTER", "ItemViewHolder")
         }
     }
 
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"11\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision a45a53820f0f73961358e451e6a2a7b66b5b5155)
+++ b/.idea/gradle.xml	(date 1659114400224)
@@ -14,6 +14,7 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
+        <option name="resolveModulePerSourceSet" value="false" />
       </GradleProjectSettings>
     </option>
   </component>
