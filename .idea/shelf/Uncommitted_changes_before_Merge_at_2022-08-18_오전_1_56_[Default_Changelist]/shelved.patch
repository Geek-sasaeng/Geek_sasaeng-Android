Index: app/src/main/java/com/example/geeksasaeng/Chatting/ChattingRoom/ChattingRoomActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Chatting.ChattingRoom\r\n\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.util.Log\r\nimport android.view.View\r\nimport androidx.annotation.NonNull\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.DialogFragment\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport com.example.geeksasaeng.Chatting.ChattingList.ChattingRoomRVAdapter\r\nimport com.example.geeksasaeng.Chatting.ChattingRoom.Retrofit.*\r\nimport com.example.geeksasaeng.Home.Party.LookParty.DialogDeliveryOptionMyPopup\r\nimport com.example.geeksasaeng.Home.Party.LookParty.DialogDeliveryOptionOtherPopup\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.Utils.*\r\nimport com.example.geeksasaeng.databinding.ActivityChattingRoomBinding\r\nimport com.google.firebase.firestore.*\r\nimport com.google.android.gms.tasks.Task\r\nimport com.google.android.gms.tasks.Tasks\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.firestore.*\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport kotlin.collections.HashMap\r\n\r\nclass ChattingRoomActivity :\r\n    BaseActivity<ActivityChattingRoomBinding>(ActivityChattingRoomBinding::inflate),\r\n    ChattingMemberLeaveView, MemberOptionView, LeaderOptionView, ChattingLeaderLeaveView {\r\n\r\n    private var roomName = String()\r\n    private var chattingList: MutableList<Chatting> = ArrayList()\r\n    private var roomUuid = String()\r\n    lateinit var chattingRoomRVAdapter: ChattingRoomRVAdapter\r\n    lateinit var chattingService: ChattingService\r\n\r\n    // topLayoutFlag (모든 파티원 X = False / 모든 파티원 O = True)\r\n    private var topLayoutFlag = false\r\n    private var leader = false\r\n    private var chattingRoomName = String()\r\n    private var nickname = getNickname()\r\n    lateinit var bank: String\r\n    lateinit var accountNumber: String\r\n    var preChatNickname: String = \"\"\r\n\r\n    // Firebase\r\n    val db = FirebaseFirestore.getInstance()\r\n\r\n    override fun initAfterBinding() {\r\n        roomName = intent.getStringExtra(\"roomName\").toString()\r\n        roomUuid = intent.getStringExtra(\"roomUuid\").toString()\r\n        chattingRoomName = roomUuid\r\n        binding.chattingRoomTitleTv.text = roomName\r\n\r\n        initTopLayout()\r\n        initClickListener()\r\n        initTextChangedListener()\r\n        initSendChatListener()\r\n        initRealTimeChatListener()\r\n        initAdapter()\r\n        initChattingService()\r\n        // binding.chattingRoomChattingRv.smoothScrollToPosition(30)\r\n        optionClickListener()\r\n    }\r\n\r\n    private fun initTopLayout() {\r\n        topLayoutFlag = true\r\n        var participants: ArrayList<Any>? = null\r\n\r\n        // 방장인지 아닌지 확인하기\r\n        db.collection(\"Rooms\").document(roomUuid).get().addOnSuccessListener { document ->\r\n            val roomInfo = document.get(\"roomInfo\") as java.util.HashMap<String, Any> //roomInfo 필드 값 정보들을 해시맵 형태로 얻어온다.\r\n            participants = roomInfo.get(\"participants\") as ArrayList<Any>\r\n            var participantIdx: Int = -1\r\n            for ((idx, map) in participants!!.withIndex()) {\r\n                val map = map as HashMap<String, String>\r\n                val participantName = map.get(\"participant\").toString()\r\n                if (participantName.equals(getNickname())) {\r\n                    participantIdx = idx\r\n                    break\r\n                }\r\n            }\r\n\r\n            // Idx == 0 이면 방장임\r\n            if (participantIdx == 0)\r\n                leader = true\r\n\r\n            if (topLayoutFlag) {\r\n                binding.chattingRoomTopLayout.visibility = View.VISIBLE\r\n\r\n                if (leader == true) {\r\n                    binding.chattingRoomTopLayoutStatusTv.text = \"메뉴 보기\"\r\n                    binding.chattingRoomTopLayoutBtnTv.text = \"주문 완료\"\r\n                } else {\r\n                    getBankAndAccountNumber()\r\n                    binding.chattingRoomTopLayoutBtnTv.text = \"송금 완료\"\r\n                }\r\n            } else {\r\n                binding.chattingRoomTopLayout.visibility = View.INVISIBLE\r\n            }\r\n\r\n        }.addOnFailureListener { e ->\r\n            Log.w(\"chatting-member-leave\", \"파이어베이스 채팅방에서 유저들을 가져오는 도중에 오류가 발생했습니다.\")\r\n        }\r\n    }\r\n\r\n    private fun getBankAndAccountNumber() {\r\n        db.collection(\"Rooms\").document(chattingRoomName).get().addOnSuccessListener { result ->\r\n            bank = result.get(\"roomInfo.bank\").toString()\r\n            accountNumber = result.get(\"roomInfo.accountNumber\").toString()\r\n            binding.chattingRoomTopLayoutStatusTv.text = \"$bank $accountNumber\"\r\n        }.addOnFailureListener { _ ->\r\n            bank = \"은행 및 \"\r\n            accountNumber = \"계좌번호 불러오기 실패\"\r\n            binding.chattingRoomTopLayoutStatusTv.text = \"$bank $accountNumber\"\r\n        }\r\n    }\r\n\r\n    private fun initAdapter() {\r\n        chattingRoomRVAdapter = ChattingRoomRVAdapter(chattingList)\r\n        binding.chattingRoomChattingRv.adapter = chattingRoomRVAdapter\r\n        binding.chattingRoomChattingRv.layoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n    }\r\n\r\n    private fun initClickListener() {\r\n        binding.chattingRoomBackBtn.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        binding.chattingRoomTopLayoutBtn.setOnClickListener {\r\n            binding.chattingRoomTopLayout.visibility = View.GONE\r\n            topLayoutFlag = false\r\n\r\n            if (binding.chattingRoomTopLayoutBtnTv.text == \"주문 완료\")\r\n                CustomToastMsg.createToast(this, \"주문이 완료되었습니다\", \"#8029ABE2\", 53)?.show()\r\n            else if (binding.chattingRoomTopLayoutBtnTv.text == \"송금 완료\")\r\n                CustomToastMsg.createToast(this, \"송금이 완료되었습니다\", \"#8029ABE2\", 53)?.show()\r\n        }\r\n    }\r\n\r\n    private fun initChattingService() {\r\n        chattingService = ChattingService()\r\n        chattingService.setChattingMemberLeaveView(this)\r\n    }\r\n\r\n    private fun optionClickListener() {\r\n        binding.chattingRoomOptionBtn.setOnClickListener {\r\n            if (leader) {\r\n                val bundle = Bundle()\r\n                var optionDialog = LeaderOptionDialog()\r\n                bundle.putString(\"roomUuid\", roomUuid)\r\n                optionDialog.arguments = bundle\r\n                optionDialog.show(supportFragmentManager, \"chattingLeaderOptionDialog\")\r\n            } else {\r\n                val optionDialog = MemberOptionDialog()\r\n                optionDialog.setOptionView(this)\r\n                optionDialog.show(supportFragmentManager, \"chattingUserOptionDialog\")\r\n            }\r\n        }\r\n\r\n        binding.chattingRoomBackBtn.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        binding.chattingRoomTopLayoutBtn.setOnClickListener {\r\n            binding.chattingRoomTopLayout.visibility = View.GONE\r\n            topLayoutFlag = false\r\n\r\n            if (binding.chattingRoomTopLayoutBtnTv.text == \"주문 완료\")\r\n                CustomToastMsg.createToast(this, \"주문이 완료되었습니다\", \"#8029ABE2\", 53)?.show()\r\n            else if (binding.chattingRoomTopLayoutBtnTv.text == \"송금 완료\")\r\n                CustomToastMsg.createToast(this, \"송금이 완료되었습니다\", \"#8029ABE2\", 53)?.show()\r\n        }\r\n    }\r\n\r\n    private fun initTextChangedListener() {\r\n        binding.chattingRoomChattingTextEt.addTextChangedListener(object: TextWatcher {\r\n            override fun beforeTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n            override fun onTextChanged(p0: CharSequence?, p1: Int, p2: Int, p3: Int) {}\r\n            override fun afterTextChanged(p0: Editable?) {\r\n                if (binding.chattingRoomChattingTextEt.text.isNotEmpty()) {\r\n                    binding.chattingRoomSendTv.setTextColor(ContextCompat.getColor(applicationContext, R.color.main))\r\n                    binding.chattingRoomSendTv.isEnabled = true\r\n                }\r\n                else {\r\n                    binding.chattingRoomSendTv.setTextColor(ContextCompat.getColor(applicationContext, R.color.gray_2))\r\n                    binding.chattingRoomSendTv.isEnabled = false\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun initSendChatListener() {\r\n        binding.chattingRoomSendTv.setOnClickListener { //메세지 전송버튼\r\n            val uuid = UUID.randomUUID().toString()\r\n\r\n            var myChatting = binding.chattingRoomChattingTextEt.text.toString()\r\n            var time = calculateDate()\r\n\r\n            var data = hashMapOf(\r\n                \"content\" to myChatting,\r\n                \"nickname\" to nickname,\r\n                \"isSystemMessage\" to false,\r\n                \"time\" to time,\r\n                \"userImgUrl\" to \"이미지 링크\"\r\n            )\r\n\r\n            db.collection(\"Rooms\").document(chattingRoomName).collection(\"Messages\")\r\n                .document(uuid).set(data).addOnSuccessListener {\r\n                    binding.chattingRoomChattingTextEt.setText(\"\")\r\n            }\r\n\r\n           //roomInfo에 updatedAt 갱신\r\n            db.collection(\"Rooms\").document(chattingRoomName)\r\n                .update(\"roomInfo.updatedAt\", getCurrentDateTime())\r\n                .addOnSuccessListener { Log.d(\"firestore-updatedAt\", \"DocumentSnapshot successfully written!\") }\r\n                .addOnFailureListener { e -> Log.w(\"firestore-updatedAt\", \"Error update document\", e) }\r\n        }\r\n    }\r\n\r\n    fun getCurrentDateTime(): String{\r\n        val formatter = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault())\r\n        return formatter.format(Calendar.getInstance().time)\r\n    }\r\n\r\n    private fun calculateDate(): String {\r\n        val now: Long = System.currentTimeMillis()\r\n        val simpleDate = SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss aa\")\r\n        var date: String = simpleDate.format(Date(now)).toString()\r\n        if (date.substring(20) == \"오전\" && date.substring(11, 13) == \"12\")\r\n            date = date.substring(0, 11) + \"00\" + date.substring(13, 20)\r\n        else if (date.substring(20) == \"오후\" && date.substring(11, 13) == \"12\")\r\n            date = date.substring(0, 11) + (Integer.parseInt(date.substring(11, 13))).toString() + date.substring(13, 20)\r\n        else date = date.substring(0, 11) + (Integer.parseInt(date.substring(11, 13)) + 12).toString() + date.substring(13, 20)\r\n        return date\r\n    }\r\n\r\n    private fun initRealTimeChatListener() {\r\n        db.collection(\"Rooms\").document(roomUuid).collection(\"Messages\").addSnapshotListener { snapshots, _ ->\r\n            for (dc in snapshots?.documentChanges!!) {\r\n                if (dc.type == DocumentChange.Type.ADDED) {\r\n                    var item: Chatting\r\n\r\n                    if (dc.document[\"isSystemMessage\"] == true) {\r\n                        item = Chatting(3, null, dc.document[\"time\"].toString(), null, dc.document[\"content\"].toString(), null)\r\n                    } else if (nickname == dc.document[\"nickname\"]) {\r\n                        item = Chatting(1, nickname, dc.document[\"time\"].toString(), R.drawable.ic_default_profile, dc.document[\"content\"].toString(), 0)\r\n                    } else {\r\n                        item = Chatting(2, dc.document[\"nickname\"].toString(), dc.document[\"time\"].toString(), R.drawable.ic_default_profile2, dc.document[\"content\"].toString(), 0)\r\n                    }\r\n\r\n                    preChatNickname = dc.document[\"nickname\"].toString()\r\n                    chattingRoomRVAdapter.addItem(item)\r\n                }\r\n            }\r\n\r\n            chattingRoomRVAdapter.itemSort()\r\n\r\n            var scrollSize = chattingRoomRVAdapter.returnPosition() - 1\r\n            binding.chattingRoomChattingRv.scrollToPosition(scrollSize)\r\n        }\r\n    }\r\n\r\n    // 일반 유저가 나가기를 눌렀을 경우\r\n    override fun MemberExistClick() {\r\n        val chattingPartyMemberLeaveRequest = ChattingPartyMemberLeaveRequest(roomUuid)\r\n        chattingService.getChattingPartyMemberLeave(chattingPartyMemberLeaveRequest)\r\n    }\r\n\r\n\r\n    override fun chattingMemberLeaveSuccess(result: String) {\r\n        // 파이어베이스 멤버 삭제\r\n        var participants: ArrayList<Any>? = null\r\n\r\n        // 나의 participantMap 가져오기\r\n        db.collection(\"Rooms\")\r\n            .document(roomUuid)\r\n            .get()\r\n            .addOnSuccessListener { document ->\r\n                val roomInfo =\r\n                    document.get(\"roomInfo\") as HashMap<String, Any> //roomInfo 필드 값 정보들을 해시맵 형태로 얻어온다.\r\n                participants = roomInfo.get(\"participants\") as ArrayList<Any>\r\n                var participantMap: HashMap<String, String>? = null\r\n                for ((idx, map) in participants!!.withIndex()) {\r\n                    val map = map as HashMap<String, String>\r\n                    if (map.get(\"participant\").equals(getNickname())) {\r\n\r\n                        // participants 에서 제거하기\r\n                        db.collection(\"Rooms\")\r\n                            .document(roomUuid)\r\n                            .update(\"roomInfo.participants\", FieldValue.arrayRemove(map))\r\n                            .addOnSuccessListener {\r\n                                finish()\r\n                                Log.d(\"chatting-member-leave\", \"파이어베이스 채팅방에서 유저가 삭제됐습니다.\")\r\n                            }\r\n                            .addOnFailureListener { e ->\r\n                                Log.w(\r\n                                    \"chatting-member-leave\",\r\n                                    \"파이어베이스 채팅방에서 유저를 삭제하는 도중에 오류가 발생했습니다.\"\r\n                                )\r\n                            }\r\n                        break\r\n\r\n                    }\r\n                }\r\n            }.addOnFailureListener { e ->\r\n                Log.w(\r\n                    \"chatting-member\",\r\n                    \"파이어베이스 채팅방에서 유저 정보를 가져오는 과정 중에 오류가 발생했습니다.\"\r\n                )\r\n            }\r\n    }\r\n\r\n    override fun chattingMemberLeaveFailure(code: Int, message: String) {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n\r\n    override fun LeaderExistClick() {\r\n        val db = FirebaseFirestore.getInstance()\r\n\r\n        // 방장 나가기\r\n        var participants: ArrayList<Any>? = null\r\n        db.collection(\"Rooms\")\r\n            .document(roomUuid)\r\n            .get()\r\n            .addOnSuccessListener { document ->\r\n                val roomInfo =\r\n                    document.get(\"roomInfo\") as java.util.HashMap<String, Any> //roomInfo 필드 값 정보들을 해시맵 형태로 얻어온다.\r\n                participants = roomInfo.get(\"participants\") as ArrayList<Any>\r\n                var leaderMap: HashMap<String, String>? = null\r\n                var nextLeader: String? = null\r\n                // 방장 후보군 닉네임 가져오기\r\n                for ((idx, map) in participants!!.withIndex()) {\r\n                    val map = map as HashMap<String, String>\r\n                    if (idx == 0) {\r\n                        leaderMap = map\r\n                    } else if (idx == 1) {\r\n                        nextLeader = map.get(\"participant\").toString()\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // 방장 삭제하기 API 호출\r\n                chattingService.setChattingLeaderLeaveView(this)\r\n                val chattingPartyLeaderLeaveRequest = ChattingPartyLeaderLeaveRequest(nextLeader, roomUuid)\r\n                chattingService.getChattingPartyLeaderLeave(\r\n                    chattingPartyLeaderLeaveRequest,\r\n                    leaderMap!!\r\n                )\r\n            }\r\n    }\r\n\r\n    override fun chattingLeaderLeaveSuccess(result: String, leaderMap: HashMap<String, String>) {\r\n        // 방장 삭제하기 파이어스토어 호출\r\n        db.collection(\"Rooms\")\r\n            .document(roomUuid)\r\n            .update(\"roomInfo.participants\", FieldValue.arrayRemove(leaderMap))\r\n            .addOnSuccessListener {\r\n                Log.d(\r\n                    \"chatting-leader-leave\",\r\n                    \"파이어베이스 채팅방에서 방장이 삭제됐습니다.\"\r\n                )\r\n            }\r\n            .addOnFailureListener { e ->\r\n                Log.w(\r\n                    \"chatting-leader-leave\",\r\n                    \"파이어베이스 채팅방에서 방장이 삭제하는 도중에 오류가 발생했습니다.\"\r\n                )\r\n            }\r\n        finish()\r\n    }\r\n\r\n    override fun chattingLeaderLeaveFailure(code: Int, message: String) {\r\n        TODO(\"Not yet implemented\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Chatting/ChattingRoom/ChattingRoomActivity.kt b/app/src/main/java/com/example/geeksasaeng/Chatting/ChattingRoom/ChattingRoomActivity.kt
--- a/app/src/main/java/com/example/geeksasaeng/Chatting/ChattingRoom/ChattingRoomActivity.kt	(revision 0d67be4119ed0b6fcf995acdc9c413c6f5626275)
+++ b/app/src/main/java/com/example/geeksasaeng/Chatting/ChattingRoom/ChattingRoomActivity.kt	(date 1660755372164)
@@ -25,8 +25,7 @@
 import java.util.*
 import kotlin.collections.HashMap
 
-class ChattingRoomActivity :
-    BaseActivity<ActivityChattingRoomBinding>(ActivityChattingRoomBinding::inflate),
+class ChattingRoomActivity : BaseActivity<ActivityChattingRoomBinding>(ActivityChattingRoomBinding::inflate),
     ChattingMemberLeaveView, MemberOptionView, LeaderOptionView, ChattingLeaderLeaveView {
 
     private var roomName = String()
