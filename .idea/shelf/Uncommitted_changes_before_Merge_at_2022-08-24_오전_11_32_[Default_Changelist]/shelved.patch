Index: app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.geeksasaeng.Home.Delivery\r\n\r\nimport android.animation.Animator\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.*\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.swiperefreshlayout.widget.SwipeRefreshLayout\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.airbnb.lottie.LottieAnimationView\r\nimport com.example.geeksasaeng.Home.CreateParty.CreatePartyActivity\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.BannerVPAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.DeliveryRVAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Adapter.PeopleSpinnerAdapter\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryBannerView\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryFilterView\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryService\r\nimport com.example.geeksasaeng.Home.Delivery.Retrofit.DeliveryView\r\nimport com.example.geeksasaeng.Home.Delivery.Timer.DeliveryTimer\r\nimport com.example.geeksasaeng.Home.Delivery.Timer.TimerData\r\nimport com.example.geeksasaeng.Home.Party.LookParty.LookPartyFragment\r\nimport com.example.geeksasaeng.MainActivity\r\nimport com.example.geeksasaeng.R\r\nimport com.example.geeksasaeng.Utils.BaseFragment\r\nimport com.example.geeksasaeng.Utils.getDormitoryId\r\nimport com.example.geeksasaeng.databinding.FragmentDeliveryBinding\r\nimport java.util.*\r\nimport java.util.concurrent.CopyOnWriteArrayList\r\n\r\nclass DeliveryFragment: BaseFragment<FragmentDeliveryBinding>(FragmentDeliveryBinding::inflate), DeliveryView, DeliveryFilterView, DeliveryBannerView {\r\n\r\n    lateinit var loadingAnimationView: LottieAnimationView\r\n    var loadingBannerFlag = false\r\n    var loadingDeliveryListFlag = false\r\n    private var deliveryArray = ArrayList<DeliveryPartiesVoList?>()\r\n    private lateinit var deliveryAdapter: DeliveryRVAdapter\r\n    private lateinit var deliveryService: DeliveryService //서비스 객체\r\n    private lateinit var deliveryBannerAdapter: BannerVPAdapter\r\n    private lateinit var timerTask: DeliveryTimer\r\n    private var flag: Int = 1\r\n    private var currentPosition = Int.MAX_VALUE / 2\r\n    private val thread = Thread(PagerRunnable())\r\n    var isLoading = false\r\n    var dormitoryId: Int = 0\r\n    var totalCursor: Int = 0\r\n    var orderTimeCategory: String? = null\r\n    var maxMatching: Int? = null\r\n    var finalPage: Boolean? = false\r\n    var filterCheckFlag: Boolean = false\r\n    var filter1CheckFlag: Boolean = false //인원수\r\n    var filter2CheckFlag: Boolean = false //카테고리\r\n    private var lastCheckedBox = -1\r\n    private lateinit var handler: Handler;\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        loadingDeliveryListFlag = false\r\n        loadingBannerFlag = false\r\n\r\n        loadingStart()\r\n\r\n        //핸들러 설정\r\n        handler = Handler(Looper.getMainLooper()) {\r\n            setPage()\r\n            true\r\n        }\r\n\r\n        refreshing() // 화면이 다시 시작될 때 파티 목록 리프레시\r\n        initBanner() // 배너작업\r\n        flag = 1 // 다른 페이지 갔다가 돌아오면 다시 스크롤 시작\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        flag = 0 // 다른 페이지로 떠나있는 동안 스크롤 동작 필요없음. 멈추기\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        thread.interrupt() //쓰레드 중지\r\n    }\r\n\r\n    override fun initAfterBinding() {\r\n        dormitoryId = getDormitoryId()!!\r\n        // 모든 fragment stack 제거\r\n        clearBackStack()\r\n\r\n        initDeliveryService()\r\n\r\n        binding.deliveryProgressCover.visibility = View.GONE\r\n        binding.deliveryBottomView.visibility = View.VISIBLE\r\n\r\n        //initBanner() //배너작업\r\n        initSpinner() //필터(spinner) 작업\r\n        initCheckBox() //필터(checkBox) 작업\r\n        initTopScrollListener() // 상단 스크롤 작업\r\n        // initAdapter()\r\n\r\n        binding.deliveryFloatingBtn.setOnClickListener {\r\n            val intent = Intent(context, CreatePartyActivity::class.java)\r\n            startActivity(intent)\r\n        }\r\n\r\n        if (totalCursor == 0)\r\n            initLoadPosts()\r\n\r\n        initScrollListener()\r\n    }\r\n\r\n    // 리사이클러뷰에 최초로 넣어줄 데이터를 로드하는 경우\r\n    private fun initLoadPosts() {\r\n        totalCursor = 0\r\n        isLoading = false\r\n        finalPage = false\r\n        filterCheckFlag = filter1CheckFlag||filter2CheckFlag\r\n        if (filterCheckFlag) getDeliveryFilterList(dormitoryId, totalCursor, orderTimeCategory, maxMatching)\r\n        else getDeliveryAllList(dormitoryId, totalCursor)\r\n    }\r\n\r\n    // 리사이클러뷰에 더 보여줄 데이터를 로드하는 경우\r\n    // TODO: 로딩 중에 스크롤 막기\r\n    // TODO: 새로고침 했을 때 제일 밑으로 가게 만들기\r\n    private fun initMoreLoadPosts() {\r\n        binding.deliveryProgressCover.visibility = View.VISIBLE\r\n        val handler = Handler()\r\n        handler.postDelayed({\r\n            filterCheckFlag = filter1CheckFlag||filter2CheckFlag\r\n            if (filterCheckFlag) getDeliveryFilterList(dormitoryId, totalCursor, orderTimeCategory, maxMatching)\r\n            else getDeliveryAllList(dormitoryId, totalCursor)\r\n            isLoading = false\r\n            binding.deliveryProgressCover.visibility = View.GONE\r\n        }, 1200)\r\n    }\r\n\r\n    // 상단 스크롤 관련\r\n    private fun initTopScrollListener() {\r\n        binding.deliverySwipe.setOnRefreshListener(SwipeRefreshLayout.OnRefreshListener { /* swipe 시 진행할 동작 */\r\n            refreshing()\r\n        })\r\n    }\r\n\r\n    private fun refreshing(){ // 파티목록 새로고침\r\n        filterCheckFlag = filter1CheckFlag||filter2CheckFlag //디버깅용 - 밑에 로그 찍는용\r\n        //Log.d(\"deliveryFilterCheck\", filterCheckFlag.toString())\r\n        Log.d(\"deliveryFilterCheck\", filterCheckFlag.toString()+\":\"+filter1CheckFlag.toString()+\"/\"+filter2CheckFlag.toString())\r\n        deliveryArray.clear()\r\n        initLoadPosts()\r\n        initAdapter()\r\n        binding.deliverySwipe.isRefreshing = false\r\n    }\r\n\r\n    // Adapter 설정\r\n    private fun initAdapter() {\r\n        deliveryAdapter = DeliveryRVAdapter(deliveryArray)\r\n        deliveryAdapter.stateRestorationPolicy = RecyclerView.Adapter.StateRestorationPolicy.PREVENT_WHEN_EMPTY\r\n        binding.deliveryRv.adapter = deliveryAdapter\r\n        binding.deliveryRv.layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)\r\n\r\n        deliveryAdapter.setOnItemClickListener(object : DeliveryRVAdapter.OnItemClickListener{\r\n            override fun onItemClick(data: DeliveryPartiesVoList, pos : Int) {\r\n                var deliveryItemId = deliveryAdapter.getDeliveryItemId(pos).toString()\r\n\r\n                val transaction: FragmentTransaction = (context as MainActivity).supportFragmentManager.beginTransaction()\r\n\r\n                val bundle = Bundle()\r\n                bundle.putString(\"deliveryItemId\", deliveryItemId)\r\n\r\n                val lookPartyFragment = LookPartyFragment()\r\n                lookPartyFragment.arguments = bundle\r\n\r\n                transaction.addToBackStack(\"lookParty\").replace(R.id.main_frm, lookPartyFragment)\r\n                transaction.commit()\r\n            }\r\n        })\r\n    }\r\n\r\n    // 하단 스크롤 관련\r\n    // TODO: 하단 스크롤 디자인 관련 수정 필요해보임! (지금은 오류 해결하려고 일단 디자인 이렇게 했어!)\r\n    private fun initScrollListener() {\r\n        binding.deliveryRv.addOnScrollListener(object : RecyclerView.OnScrollListener() {\r\n            override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {\r\n                super.onScrolled(recyclerView, dx, dy)\r\n\r\n                val layoutManager = binding.deliveryRv.layoutManager\r\n\r\n                if (finalPage == true) {\r\n                    if ((layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() >= deliveryArray.size - 2)\r\n                        binding.deliveryBottomView.visibility = View.INVISIBLE\r\n                    else binding.deliveryBottomView.visibility = View.VISIBLE\r\n                }\r\n\r\n                if (!isLoading) {\r\n                    if (layoutManager != null && (layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() == deliveryArray.size - 1) {\r\n                        if (finalPage == false)\r\n                            initMoreLoadPosts()\r\n                        else binding.deliveryBottomView.visibility = View.INVISIBLE\r\n\r\n                        isLoading = true\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    }\r\n    private fun initDeliveryService(){\r\n        deliveryService = DeliveryService() //서비스 객체 생성\r\n        deliveryService.setDeliveryView(this)\r\n        deliveryService.setDeliveryBannerView(this)\r\n    }\r\n\r\n    // 배달 목록 가져오기\r\n    private fun getDeliveryAllList(dormitoryId: Int, cursor: Int) {\r\n        deliveryService.getDeliveryAllList(dormitoryId, cursor)\r\n        totalCursor += 1\r\n    }\r\n\r\n    // 배달파티 목록 조회 성공\r\n    override fun deliverySuccess(result: DeliveryResult) {\r\n        loadingDeliveryListFlag = true\r\n\r\n        if (loadingDeliveryListFlag && loadingBannerFlag)\r\n            loadingStop()\r\n\r\n        finalPage = result.finalPage\r\n        val result = result.deliveryPartiesVoList\r\n\r\n        for (i in 0 until result!!.size) {\r\n            var currentMatching = result?.get(i)?.currentMatching\r\n            var foodCategory = result?.get(i)?.foodCategory\r\n            var id = result?.get(i)?.id\r\n            var maxMatching = result?.get(i)?.maxMatching\r\n            var orderTime = result?.get(i)?.orderTime\r\n            var title = result?.get(i)?.title\r\n            var hashTags = result?.get(i)?.hasHashTag\r\n\r\n            deliveryArray.add(\r\n                // DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, calculateTime(orderTime!!), title, hashTags)\r\n                DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, orderTime!!, title, hashTags)\r\n            )\r\n\r\n            deliveryAdapter.notifyDataSetChanged()\r\n        }\r\n    }\r\n\r\n    override fun deliveryFailure(code: Int, message: String) {\r\n        Log.d(\"DELIVERY-RESPONSE\", \"DELIVERY-FRAGMENT-FAILURE\")\r\n        totalCursor--\r\n    }\r\n\r\n    private fun initCheckBox() { //체크버튼 이벤트 (아침, 점심, 저녁)\r\n        binding.deliveryCb1.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            filterCheckFlag = true\r\n            if(isChecked){\r\n                binding.deliveryCb2.isChecked = false\r\n                binding.deliveryCb3.isChecked = false\r\n                binding.deliveryCb4.isChecked = false\r\n                orderTimeCategory = \"BREAKFAST\"\r\n                lastCheckedBox = R.id.delivery_cb1\r\n                filter2CheckFlag = true\r\n            }else{ // 체크가 꺼지면\r\n                if(lastCheckedBox==R.id.delivery_cb1){\r\n                    orderTimeCategory = null\r\n                    filter2CheckFlag = false\r\n                }\r\n            }\r\n            refreshing()\r\n            Log.d(\"check\",orderTimeCategory.toString())\r\n        }\r\n\r\n        binding.deliveryCb2.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if(isChecked){\r\n                binding.deliveryCb1.isChecked = false\r\n                binding.deliveryCb3.isChecked = false\r\n                binding.deliveryCb4.isChecked = false\r\n                orderTimeCategory = \"LUNCH\"\r\n                lastCheckedBox = R.id.delivery_cb2\r\n                filter2CheckFlag = true\r\n            }else{ // 체크가 꺼지면\r\n                if(lastCheckedBox==R.id.delivery_cb2){ //현재 체크되어있는애를 다시 클릭하는 경우\r\n                    orderTimeCategory = null\r\n                    filter2CheckFlag = false\r\n                }\r\n            }\r\n            refreshing()\r\n            Log.d(\"check\",orderTimeCategory.toString())\r\n        }\r\n\r\n        binding.deliveryCb3.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            if(isChecked){\r\n                binding.deliveryCb1.isChecked = false\r\n                binding.deliveryCb2.isChecked = false\r\n                binding.deliveryCb4.isChecked = false\r\n                orderTimeCategory = \"DINNER\"\r\n                lastCheckedBox = R.id.delivery_cb3\r\n                filter2CheckFlag = true\r\n            }else{ // 체크가 꺼지면\r\n                if(lastCheckedBox==R.id.delivery_cb3){\r\n                    orderTimeCategory = null\r\n                    filter2CheckFlag = false\r\n                }\r\n            }\r\n            refreshing()\r\n            Log.d(\"check\",orderTimeCategory.toString())\r\n        }\r\n\r\n        binding.deliveryCb4.setOnCheckedChangeListener { buttonView, isChecked ->\r\n            filterCheckFlag = true\r\n            if(isChecked){\r\n                binding.deliveryCb1.isChecked = false\r\n                binding.deliveryCb2.isChecked = false\r\n                binding.deliveryCb3.isChecked = false\r\n                orderTimeCategory = \"MIDNIGHT_SNACKS\"\r\n                lastCheckedBox = R.id.delivery_cb4\r\n                filter2CheckFlag = true\r\n            }else{ // 체크가 꺼지면\r\n                if(lastCheckedBox==R.id.delivery_cb4){\r\n                    orderTimeCategory = null\r\n                    filter2CheckFlag = false\r\n                }\r\n            }\r\n\r\n            refreshing()\r\n            Log.d(\"check\",orderTimeCategory.toString())\r\n        }\r\n\r\n    }\r\n\r\n    //스피너 관련 작업\r\n    private fun initSpinner() {\r\n        val items = resources.getStringArray(R.array.home_dropdown1) // spinner아이템 배열\r\n\r\n        //어댑터\r\n        val spinnerAdapter = PeopleSpinnerAdapter(requireContext(), items)\r\n        binding.deliveryPeopleSpinner.adapter = spinnerAdapter\r\n        binding.deliveryPeopleSpinner.setSelection(items.size - 1) //마지막아이템을 스피너 초기값으로 설정해준다.\r\n\r\n        //이벤트 처리\r\n        binding.deliveryPeopleSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{\r\n            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n                //TODO:스피너\r\n                Log.d(\"peopleSpinner\", \"$position/\")\r\n                if(position==0){ // 제일 상단 클릭하면 초기화 해주기 위해\r\n                    items[0]= items[6] // 인원선택(마지막값)을 현재선택값으로 넣어준다\r\n                }else{\r\n                    items[0] = items[position] // items[0]은 현재 선택된 아이템 저장용\r\n                }\r\n                val image: ImageView = view!!.findViewById(R.id.arrow_iv)\r\n                image.setImageResource(R.drawable.ic_spinner_up)\r\n                image.visibility = View.VISIBLE\r\n                //축소된 스피너화면에 맞게 아이템 색상, 화살표 변경\r\n                val textName: TextView = view!!.findViewById(R.id.spinner_text)\r\n                textName.text = items[position]\r\n                textName.setTextColor(ContextCompat.getColor(requireContext(),R.color.gray_2))\r\n\r\n                filter1CheckFlag = position in 1..5 // 1~5사이 아이템을 선택하면 filterCheckFlag true. 아니면 false(false인 경우는 젤 상단 아이템 선택해서 스피너 선택해제하는 경우)\r\n\r\n                maxMatching = position * 2\r\n                finalPage = false\r\n\r\n                refreshing()\r\n            }\r\n\r\n            override fun onNothingSelected(parent: AdapterView<*>?) {}\r\n        }\r\n    }\r\n\r\n    //배너 작업\r\n    private fun initBanner() {\r\n        deliveryService.getDeliveryBanner() //광고 불러오기\r\n    }\r\n\r\n    //페이지 변경하기\r\n    fun setPage() {\r\n        if (currentPosition == deliveryBannerAdapter.itemCount) //currentPosition이 마지막 페이지 다음페이지면\r\n            currentPosition = 0\r\n        binding.deliveryBannerVp.setCurrentItem(currentPosition, true)\r\n        currentPosition += 1\r\n    }\r\n\r\n\r\n    private fun clearBackStack() {\r\n        val fragmentManager: FragmentManager = (context as MainActivity).supportFragmentManager\r\n        fragmentManager.popBackStack(null, FragmentManager.POP_BACK_STACK_INCLUSIVE)\r\n    }\r\n\r\n    //배너 작업\r\n    override fun ondeliveryBannerSuccess(results: Array<DeliveryBannerResult>) {\r\n        loadingBannerFlag = true\r\n\r\n        if (loadingDeliveryListFlag && loadingBannerFlag)\r\n            loadingStop()\r\n\r\n        deliveryBannerAdapter = BannerVPAdapter(this)\r\n\r\n        //더미 img url\r\n        for (j in 1..5) { //fragment already added 고치기 위함\r\n            for (i in results) {\r\n                deliveryBannerAdapter.addFragment(i.imgUrl)\r\n            }\r\n        }\r\n\r\n        binding.deliveryBannerVp.adapter = deliveryBannerAdapter\r\n        binding.deliveryBannerVp.orientation = ViewPager2.ORIENTATION_HORIZONTAL\r\n        binding.deliveryBannerVp.setCurrentItem(currentPosition, false) // 시작위치 지정\r\n\r\n        //뷰페이저 넘기는 쓰레드\r\n        if (thread.state == Thread.State.NEW)\r\n            thread.start() //스레드 시작\r\n\r\n        binding.deliveryBannerVp.apply {\r\n            registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {\r\n                override fun onPageScrollStateChanged(state: Int) {\r\n                    super.onPageScrollStateChanged(state)\r\n                    when (state) {\r\n                        //뷰페이저가 멈춰져있을때\r\n                        //SCROLL_STATE_IDLE 상태는 현재 스크롤을 하지 않는 상태\r\n                        ViewPager2.SCROLL_STATE_IDLE -> {\r\n                            flag = 1\r\n                            currentPosition = binding.deliveryBannerVp.currentItem + 1\r\n                        }\r\n                        //뷰페이저 움직이는 중\r\n                        ViewPager2.SCROLL_STATE_DRAGGING -> flag = 0\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //3초마다 페이지 넘기는 기능\r\n    inner class PagerRunnable : Runnable {\r\n        override fun run() {\r\n            while (true) {\r\n                try {\r\n                    Thread.sleep(3000)\r\n                    if (this@DeliveryFragment.flag == 1) {\r\n                        handler.sendEmptyMessage(0)\r\n                    }\r\n                } catch (e: InterruptedException) {\r\n                    Log.d(\"interrupt\", \"interrupt 발생\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun ondeliveryBannerFailure(message: String) {\r\n        Log.d(\"commercial\", \"광고 불러오기 실패~!\")\r\n    }\r\n\r\n    // 배달 목록 필터 적용 후 가져오기\r\n    private fun getDeliveryFilterList(dormitoryId: Int, cursor: Int, orderTimeCategory: String?, maxMatching: Int?) {\r\n        val deliveryDataService = DeliveryService()\r\n        deliveryDataService.setDeliveryFilterView(this)\r\n        deliveryDataService.getDeliveryFilterList(dormitoryId, cursor, orderTimeCategory, maxMatching)\r\n        totalCursor += 1\r\n    }\r\n\r\n    // 배달 필터 성공\r\n    override fun deliveryFilterSuccess(result: DeliveryResult) {\r\n        loadingDeliveryListFlag = true\r\n\r\n        if (loadingDeliveryListFlag && loadingBannerFlag)\r\n            loadingStop()\r\n\r\n        finalPage = result.finalPage\r\n\r\n        val result = result.deliveryPartiesVoList\r\n\r\n        for (i in 0 until result!!.size) {\r\n            var currentMatching = result?.get(i)?.currentMatching\r\n            var foodCategory = result?.get(i)?.foodCategory\r\n            var id = result?.get(i)?.id\r\n            var maxMatching = result?.get(i)?.maxMatching\r\n            var orderTime = result?.get(i)?.orderTime\r\n            var title = result?.get(i)?.title\r\n            var hashTags = result?.get(i)?.hasHashTag\r\n\r\n            deliveryArray.add(\r\n                DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, orderTime!!, title, hashTags)\r\n                // DeliveryPartiesVoList(currentMatching, foodCategory, id, maxMatching, calculateTime(orderTime!!), title, hashTags)\r\n            )\r\n            deliveryAdapter.notifyItemChanged(deliveryArray.size - 1)\r\n        }\r\n\r\n        if (finalPage == true) {\r\n            Log.d(\"DELIVERY-FILTER\", \"getDeliveryFilterList-DeliveryArray-Size = ${deliveryArray.size}\")\r\n            if (deliveryArray.size >= 2) {\r\n                if ((binding.deliveryRv.layoutManager as LinearLayoutManager).findLastCompletelyVisibleItemPosition() >= deliveryArray.size - 2)\r\n                    binding.deliveryBottomView.visibility = View.INVISIBLE\r\n                else binding.deliveryBottomView.visibility = View.VISIBLE\r\n            } else binding.deliveryBottomView.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    override fun deliveryFilterFailure(code: Int, message: String) {\r\n        Log.d(\"DELIVERY-RESPONSE\", \"DELIVERY-FILTER-FRAGMENT-FAILURE\")\r\n        totalCursor--\r\n    }\r\n\r\n    private fun loadingStart() {\r\n        loadingAnimationView = binding.animationView\r\n        binding.animationViewLayout.visibility = View.VISIBLE\r\n        loadingAnimationView.visibility = View.VISIBLE\r\n        loadingAnimationView.playAnimation()\r\n        loadingAnimationView.addAnimatorListener(object : Animator.AnimatorListener {\r\n            override fun onAnimationStart(p0: Animator?) {\r\n            }\r\n            override fun onAnimationEnd(animation: Animator?) {\r\n                // initAfterBinding()\r\n            }\r\n            override fun onAnimationCancel(p0: Animator?) {\r\n            }\r\n            override fun onAnimationRepeat(p0: Animator?) {\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun loadingStop() {\r\n        loadingAnimationView.cancelAnimation()\r\n        binding.animationViewLayout.visibility = View.GONE\r\n        loadingAnimationView.visibility = View.GONE\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt
--- a/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt	(revision c7a40c1020bf4fac32e49865156ef328ca927f27)
+++ b/app/src/main/java/com/example/geeksasaeng/Home/Delivery/DeliveryFragment.kt	(date 1661306923420)
@@ -161,7 +161,6 @@
     // Adapter 설정
     private fun initAdapter() {
         deliveryAdapter = DeliveryRVAdapter(deliveryArray)
-        deliveryAdapter.stateRestorationPolicy = RecyclerView.Adapter.StateRestorationPolicy.PREVENT_WHEN_EMPTY
         binding.deliveryRv.adapter = deliveryAdapter
         binding.deliveryRv.layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, false)
 
